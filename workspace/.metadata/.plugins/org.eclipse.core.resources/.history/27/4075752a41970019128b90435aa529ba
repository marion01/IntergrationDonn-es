// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for MDM
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package edd_id.parent_fusion_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.MDM;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Parent_fusion Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Parent_fusion implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Parent_fusion";
	private final String projectName = "EDD_ID";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Parent_fusion.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Parent_fusion.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Parent_fusion = new byte[0];
    static byte[] commonByteArray_EDD_ID_Parent_fusion = new byte[0];

	
			    public Integer code_etu;

				public Integer getCode_etu () {
					return this.code_etu;
				}
				
			    public String annee;

				public String getAnnee () {
					return this.annee;
				}
				
			    public String nom_patro;

				public String getNom_patro () {
					return this.nom_patro;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String date_naiss;

				public String getDate_naiss () {
					return this.date_naiss;
				}
				
			    public String sexe;

				public String getSexe () {
					return this.sexe;
				}
				
			    public String nationalite;

				public String getNationalite () {
					return this.nationalite;
				}
				
			    public String bac;

				public String getBac () {
					return this.bac;
				}
				
			    public String bur_distr;

				public String getBur_distr () {
					return this.bur_distr;
				}
				
			    public String etape;

				public String getEtape () {
					return this.etape;
				}
				
			    public Integer csp_par;

				public Integer getCsp_par () {
					return this.csp_par;
				}
				
			    public String promo;

				public String getPromo () {
					return this.promo;
				}
				
			    public String niveau;

				public String getNiveau () {
					return this.niveau;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public String Lv2;

				public String getLv2 () {
					return this.Lv2;
				}
				
			    public String Provenance;

				public String getProvenance () {
					return this.Provenance;
				}
				
			    public String cod_pays;

				public String getCod_pays () {
					return this.cod_pays;
				}
				
			    public String cod_dep;

				public String getCod_dep () {
					return this.cod_dep;
				}
				
			    public String cod_post;

				public String getCod_post () {
					return this.cod_post;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Parent_fusion.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Parent_fusion.length == 0) {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Parent_fusion, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Parent_fusion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Parent_fusion) {

        	try {

        		int length = 0;
		
						this.code_etu = readInteger(dis);
					
					this.annee = readString(dis);
					
					this.nom_patro = readString(dis);
					
					this.prenom = readString(dis);
					
					this.date_naiss = readString(dis);
					
					this.sexe = readString(dis);
					
					this.nationalite = readString(dis);
					
					this.bac = readString(dis);
					
					this.bur_distr = readString(dis);
					
					this.etape = readString(dis);
					
						this.csp_par = readInteger(dis);
					
					this.promo = readString(dis);
					
					this.niveau = readString(dis);
					
					this.Groupe = readString(dis);
					
					this.Lv2 = readString(dis);
					
					this.Provenance = readString(dis);
					
					this.cod_pays = readString(dis);
					
					this.cod_dep = readString(dis);
					
					this.cod_post = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.code_etu,dos);
					
					// String
				
						writeString(this.annee,dos);
					
					// String
				
						writeString(this.nom_patro,dos);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.date_naiss,dos);
					
					// String
				
						writeString(this.sexe,dos);
					
					// String
				
						writeString(this.nationalite,dos);
					
					// String
				
						writeString(this.bac,dos);
					
					// String
				
						writeString(this.bur_distr,dos);
					
					// String
				
						writeString(this.etape,dos);
					
					// Integer
				
						writeInteger(this.csp_par,dos);
					
					// String
				
						writeString(this.promo,dos);
					
					// String
				
						writeString(this.niveau,dos);
					
					// String
				
						writeString(this.Groupe,dos);
					
					// String
				
						writeString(this.Lv2,dos);
					
					// String
				
						writeString(this.Provenance,dos);
					
					// String
				
						writeString(this.cod_pays,dos);
					
					// String
				
						writeString(this.cod_dep,dos);
					
					// String
				
						writeString(this.cod_post,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("code_etu="+String.valueOf(code_etu));
		sb.append(",annee="+annee);
		sb.append(",nom_patro="+nom_patro);
		sb.append(",prenom="+prenom);
		sb.append(",date_naiss="+date_naiss);
		sb.append(",sexe="+sexe);
		sb.append(",nationalite="+nationalite);
		sb.append(",bac="+bac);
		sb.append(",bur_distr="+bur_distr);
		sb.append(",etape="+etape);
		sb.append(",csp_par="+String.valueOf(csp_par));
		sb.append(",promo="+promo);
		sb.append(",niveau="+niveau);
		sb.append(",Groupe="+Groupe);
		sb.append(",Lv2="+Lv2);
		sb.append(",Provenance="+Provenance);
		sb.append(",cod_pays="+cod_pays);
		sb.append(",cod_dep="+cod_dep);
		sb.append(",cod_post="+cod_post);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Parent_fusion = new byte[0];
    static byte[] commonByteArray_EDD_ID_Parent_fusion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer code_etu;

				public Integer getCode_etu () {
					return this.code_etu;
				}
				
			    public String annee;

				public String getAnnee () {
					return this.annee;
				}
				
			    public String nom_patro;

				public String getNom_patro () {
					return this.nom_patro;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String date_naiss;

				public String getDate_naiss () {
					return this.date_naiss;
				}
				
			    public String sexe;

				public String getSexe () {
					return this.sexe;
				}
				
			    public String nationalite;

				public String getNationalite () {
					return this.nationalite;
				}
				
			    public String bac;

				public String getBac () {
					return this.bac;
				}
				
			    public String bur_distr;

				public String getBur_distr () {
					return this.bur_distr;
				}
				
			    public String cod_pays;

				public String getCod_pays () {
					return this.cod_pays;
				}
				
			    public String etape;

				public String getEtape () {
					return this.etape;
				}
				
			    public Integer csp_par;

				public Integer getCsp_par () {
					return this.csp_par;
				}
				
			    public String cod_dep;

				public String getCod_dep () {
					return this.cod_dep;
				}
				
			    public String cod_post;

				public String getCod_post () {
					return this.cod_post;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.annee == null) ? 0 : this.annee.hashCode());
					
						result = prime * result + ((this.nom_patro == null) ? 0 : this.nom_patro.hashCode());
					
						result = prime * result + ((this.prenom == null) ? 0 : this.prenom.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.annee == null) {
							if (other.annee != null)
								return false;
						
						} else if (!this.annee.equals(other.annee))
						
							return false;
					
						if (this.nom_patro == null) {
							if (other.nom_patro != null)
								return false;
						
						} else if (!this.nom_patro.equals(other.nom_patro))
						
							return false;
					
						if (this.prenom == null) {
							if (other.prenom != null)
								return false;
						
						} else if (!this.prenom.equals(other.prenom))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.code_etu = this.code_etu;
	            other.annee = this.annee;
	            other.nom_patro = this.nom_patro;
	            other.prenom = this.prenom;
	            other.date_naiss = this.date_naiss;
	            other.sexe = this.sexe;
	            other.nationalite = this.nationalite;
	            other.bac = this.bac;
	            other.bur_distr = this.bur_distr;
	            other.cod_pays = this.cod_pays;
	            other.etape = this.etape;
	            other.csp_par = this.csp_par;
	            other.cod_dep = this.cod_dep;
	            other.cod_post = this.cod_post;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.annee = this.annee;
	            	other.nom_patro = this.nom_patro;
	            	other.prenom = this.prenom;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Parent_fusion.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Parent_fusion.length == 0) {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Parent_fusion, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Parent_fusion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Parent_fusion) {

        	try {

        		int length = 0;
		
					this.annee = readString(dis);
					
					this.nom_patro = readString(dis);
					
					this.prenom = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.annee,dos);
					
					// String
				
						writeString(this.nom_patro,dos);
					
					// String
				
						writeString(this.prenom,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.code_etu = readInteger(dis,ois);
					
						this.date_naiss = readString(dis,ois);
					
						this.sexe = readString(dis,ois);
					
						this.nationalite = readString(dis,ois);
					
						this.bac = readString(dis,ois);
					
						this.bur_distr = readString(dis,ois);
					
						this.cod_pays = readString(dis,ois);
					
						this.etape = readString(dis,ois);
					
						this.csp_par = readInteger(dis,ois);
					
						this.cod_dep = readString(dis,ois);
					
						this.cod_post = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.code_etu, dos, oos);
					
						writeString(this.date_naiss, dos, oos);
					
						writeString(this.sexe, dos, oos);
					
						writeString(this.nationalite, dos, oos);
					
						writeString(this.bac, dos, oos);
					
						writeString(this.bur_distr, dos, oos);
					
						writeString(this.cod_pays, dos, oos);
					
						writeString(this.etape, dos, oos);
					
					writeInteger(this.csp_par, dos, oos);
					
						writeString(this.cod_dep, dos, oos);
					
						writeString(this.cod_post, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("code_etu="+String.valueOf(code_etu));
		sb.append(",annee="+annee);
		sb.append(",nom_patro="+nom_patro);
		sb.append(",prenom="+prenom);
		sb.append(",date_naiss="+date_naiss);
		sb.append(",sexe="+sexe);
		sb.append(",nationalite="+nationalite);
		sb.append(",bac="+bac);
		sb.append(",bur_distr="+bur_distr);
		sb.append(",cod_pays="+cod_pays);
		sb.append(",etape="+etape);
		sb.append(",csp_par="+String.valueOf(csp_par));
		sb.append(",cod_dep="+cod_dep);
		sb.append(",cod_post="+cod_post);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.annee, other.annee);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.nom_patro, other.nom_patro);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.prenom, other.prenom);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Parent_fusion = new byte[0];
    static byte[] commonByteArray_EDD_ID_Parent_fusion = new byte[0];

	
			    public Integer code_etu;

				public Integer getCode_etu () {
					return this.code_etu;
				}
				
			    public String annee;

				public String getAnnee () {
					return this.annee;
				}
				
			    public String nom_patro;

				public String getNom_patro () {
					return this.nom_patro;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String date_naiss;

				public String getDate_naiss () {
					return this.date_naiss;
				}
				
			    public String sexe;

				public String getSexe () {
					return this.sexe;
				}
				
			    public String nationalite;

				public String getNationalite () {
					return this.nationalite;
				}
				
			    public String bac;

				public String getBac () {
					return this.bac;
				}
				
			    public String bur_distr;

				public String getBur_distr () {
					return this.bur_distr;
				}
				
			    public String cod_pays;

				public String getCod_pays () {
					return this.cod_pays;
				}
				
			    public String etape;

				public String getEtape () {
					return this.etape;
				}
				
			    public Integer csp_par;

				public Integer getCsp_par () {
					return this.csp_par;
				}
				
			    public String cod_dep;

				public String getCod_dep () {
					return this.cod_dep;
				}
				
			    public String cod_post;

				public String getCod_post () {
					return this.cod_post;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Parent_fusion.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Parent_fusion.length == 0) {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Parent_fusion, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Parent_fusion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Parent_fusion) {

        	try {

        		int length = 0;
		
						this.code_etu = readInteger(dis);
					
					this.annee = readString(dis);
					
					this.nom_patro = readString(dis);
					
					this.prenom = readString(dis);
					
					this.date_naiss = readString(dis);
					
					this.sexe = readString(dis);
					
					this.nationalite = readString(dis);
					
					this.bac = readString(dis);
					
					this.bur_distr = readString(dis);
					
					this.cod_pays = readString(dis);
					
					this.etape = readString(dis);
					
						this.csp_par = readInteger(dis);
					
					this.cod_dep = readString(dis);
					
					this.cod_post = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.code_etu,dos);
					
					// String
				
						writeString(this.annee,dos);
					
					// String
				
						writeString(this.nom_patro,dos);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.date_naiss,dos);
					
					// String
				
						writeString(this.sexe,dos);
					
					// String
				
						writeString(this.nationalite,dos);
					
					// String
				
						writeString(this.bac,dos);
					
					// String
				
						writeString(this.bur_distr,dos);
					
					// String
				
						writeString(this.cod_pays,dos);
					
					// String
				
						writeString(this.etape,dos);
					
					// Integer
				
						writeInteger(this.csp_par,dos);
					
					// String
				
						writeString(this.cod_dep,dos);
					
					// String
				
						writeString(this.cod_post,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("code_etu="+String.valueOf(code_etu));
		sb.append(",annee="+annee);
		sb.append(",nom_patro="+nom_patro);
		sb.append(",prenom="+prenom);
		sb.append(",date_naiss="+date_naiss);
		sb.append(",sexe="+sexe);
		sb.append(",nationalite="+nationalite);
		sb.append(",bac="+bac);
		sb.append(",bur_distr="+bur_distr);
		sb.append(",cod_pays="+cod_pays);
		sb.append(",etape="+etape);
		sb.append(",csp_par="+String.valueOf(csp_par));
		sb.append(",cod_dep="+cod_dep);
		sb.append(",cod_post="+cod_post);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tRunJob_1Struct implements routines.system.IPersistableRow<after_tRunJob_1Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Parent_fusion = new byte[0];
    static byte[] commonByteArray_EDD_ID_Parent_fusion = new byte[0];

	
			    public Integer code_etu;

				public Integer getCode_etu () {
					return this.code_etu;
				}
				
			    public String annee;

				public String getAnnee () {
					return this.annee;
				}
				
			    public String nom_patro;

				public String getNom_patro () {
					return this.nom_patro;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String date_naiss;

				public String getDate_naiss () {
					return this.date_naiss;
				}
				
			    public String sexe;

				public String getSexe () {
					return this.sexe;
				}
				
			    public String nationalite;

				public String getNationalite () {
					return this.nationalite;
				}
				
			    public String bac;

				public String getBac () {
					return this.bac;
				}
				
			    public String bur_distr;

				public String getBur_distr () {
					return this.bur_distr;
				}
				
			    public String cod_pays;

				public String getCod_pays () {
					return this.cod_pays;
				}
				
			    public String etape;

				public String getEtape () {
					return this.etape;
				}
				
			    public Integer csp_par;

				public Integer getCsp_par () {
					return this.csp_par;
				}
				
			    public String cod_dep;

				public String getCod_dep () {
					return this.cod_dep;
				}
				
			    public String cod_post;

				public String getCod_post () {
					return this.cod_post;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Parent_fusion.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Parent_fusion.length == 0) {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Parent_fusion, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Parent_fusion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Parent_fusion) {

        	try {

        		int length = 0;
		
						this.code_etu = readInteger(dis);
					
					this.annee = readString(dis);
					
					this.nom_patro = readString(dis);
					
					this.prenom = readString(dis);
					
					this.date_naiss = readString(dis);
					
					this.sexe = readString(dis);
					
					this.nationalite = readString(dis);
					
					this.bac = readString(dis);
					
					this.bur_distr = readString(dis);
					
					this.cod_pays = readString(dis);
					
					this.etape = readString(dis);
					
						this.csp_par = readInteger(dis);
					
					this.cod_dep = readString(dis);
					
					this.cod_post = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.code_etu,dos);
					
					// String
				
						writeString(this.annee,dos);
					
					// String
				
						writeString(this.nom_patro,dos);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.date_naiss,dos);
					
					// String
				
						writeString(this.sexe,dos);
					
					// String
				
						writeString(this.nationalite,dos);
					
					// String
				
						writeString(this.bac,dos);
					
					// String
				
						writeString(this.bur_distr,dos);
					
					// String
				
						writeString(this.cod_pays,dos);
					
					// String
				
						writeString(this.etape,dos);
					
					// Integer
				
						writeInteger(this.csp_par,dos);
					
					// String
				
						writeString(this.cod_dep,dos);
					
					// String
				
						writeString(this.cod_post,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("code_etu="+String.valueOf(code_etu));
		sb.append(",annee="+annee);
		sb.append(",nom_patro="+nom_patro);
		sb.append(",prenom="+prenom);
		sb.append(",date_naiss="+date_naiss);
		sb.append(",sexe="+sexe);
		sb.append(",nationalite="+nationalite);
		sb.append(",bac="+bac);
		sb.append(",bur_distr="+bur_distr);
		sb.append(",cod_pays="+cod_pays);
		sb.append(",etape="+etape);
		sb.append(",csp_par="+String.valueOf(csp_par));
		sb.append(",cod_dep="+cod_dep);
		sb.append(",cod_post="+cod_post);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tRunJob_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tRunJob_2Process(globalMap);

		row1Struct row1 = new row1Struct();
row1Struct row3 = row1;
out1Struct out1 = new out1Struct();






	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/ID/out/fusionDataEDD.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("code_etu");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("annee");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("nom_patro");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("prenom");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("date_naiss");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("sexe");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("nationalite");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("bac");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("bur_distr");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("etape");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("csp_par");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("promo");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("niveau");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Groupe");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Lv2");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Provenance");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("cod_pays");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("cod_dep");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("cod_post");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String provenance;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_1 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();


		int columnIndex_tFileOutputExcel_1 = 0;
		
		int nb_line_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/out_apogee.xls";
		java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
		boolean isFileGenerated_tFileOutputExcel_1 = true;
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1.getParentFile();
          if (parentFile_tFileOutputExcel_1 != null && !parentFile_tFileOutputExcel_1.exists()) {
        	
             parentFile_tFileOutputExcel_1.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_1.setEncoding("ISO-8859-15");
		writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_1)), 
            		true, 
            		workbookSettings_tFileOutputExcel_1);       

        writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.getSheet("Sheet1");
        if(writableSheet_tFileOutputExcel_1 == null){
        	writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.createSheet("Sheet1", writeableWorkbook_tFileOutputExcel_1.getNumberOfSheets());
		}
		

        //modif start
        int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_1 = new int[14];
		for(int i_tFileOutputExcel_1=0;i_tFileOutputExcel_1<14;i_tFileOutputExcel_1++){
		    int fitCellViewSize_tFileOutputExcel_1=writableSheet_tFileOutputExcel_1.getColumnView(i_tFileOutputExcel_1).getSize();
			fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]=fitCellViewSize_tFileOutputExcel_1/256;
			if(fitCellViewSize_tFileOutputExcel_1%256!=0){
				fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]+=1;
			}
		}
		


		if (startRowNum_tFileOutputExcel_1 == 0){
	//modif end
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(0, nb_line_tFileOutputExcel_1, "code_etu"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>8?fitWidth_tFileOutputExcel_1[0]:8;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(1, nb_line_tFileOutputExcel_1, "annee"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>5?fitWidth_tFileOutputExcel_1[1]:5;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(2, nb_line_tFileOutputExcel_1, "nom_patro"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>9?fitWidth_tFileOutputExcel_1[2]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(3, nb_line_tFileOutputExcel_1, "prenom"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>6?fitWidth_tFileOutputExcel_1[3]:6;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(4, nb_line_tFileOutputExcel_1, "date_naiss"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[4]=fitWidth_tFileOutputExcel_1[4]>10?fitWidth_tFileOutputExcel_1[4]:10;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(5, nb_line_tFileOutputExcel_1, "sexe"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[5]=fitWidth_tFileOutputExcel_1[5]>4?fitWidth_tFileOutputExcel_1[5]:4;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(6, nb_line_tFileOutputExcel_1, "nationalite"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[6]=fitWidth_tFileOutputExcel_1[6]>11?fitWidth_tFileOutputExcel_1[6]:11;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(7, nb_line_tFileOutputExcel_1, "bac"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[7]=fitWidth_tFileOutputExcel_1[7]>3?fitWidth_tFileOutputExcel_1[7]:3;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(8, nb_line_tFileOutputExcel_1, "bur_distr"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[8]=fitWidth_tFileOutputExcel_1[8]>9?fitWidth_tFileOutputExcel_1[8]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(9, nb_line_tFileOutputExcel_1, "cod_pays"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[9]=fitWidth_tFileOutputExcel_1[9]>8?fitWidth_tFileOutputExcel_1[9]:8;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(10, nb_line_tFileOutputExcel_1, "etape"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[10]=fitWidth_tFileOutputExcel_1[10]>5?fitWidth_tFileOutputExcel_1[10]:5;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(11, nb_line_tFileOutputExcel_1, "csp_par"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[11]=fitWidth_tFileOutputExcel_1[11]>7?fitWidth_tFileOutputExcel_1[11]:7;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(12, nb_line_tFileOutputExcel_1, "cod_dep"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[12]=fitWidth_tFileOutputExcel_1[12]>7?fitWidth_tFileOutputExcel_1[12]:7;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(13, nb_line_tFileOutputExcel_1, "cod_post"
			));
		//modif end
		fitWidth_tFileOutputExcel_1[13]=fitWidth_tFileOutputExcel_1[13]>8?fitWidth_tFileOutputExcel_1[13]:8;
		nb_line_tFileOutputExcel_1 ++;
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		edd_id.fusion_apogee_0_1.Fusion_Apogee childJob_tRunJob_1 = new edd_id.fusion_apogee_0_1.Fusion_Apogee();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getException().getClass().getName() + ": " + childJob_tRunJob_1.getException().getMessage());
				}
			
	  	
			for (String[] item_tRunJob_1 : childReturn_tRunJob_1) { 
				if(childJob_tRunJob_1.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_1.length){				
			           		
			           			row1.code_etu = ParserUtils.parseTo_Integer(item_tRunJob_1[0]);
			           		
		           		}else{
			           		row1.code_etu = null;
		           		}
							
						if(1 < item_tRunJob_1.length){				
			           		
				           		row1.annee = item_tRunJob_1[1];
			           		
		           		}else{
			           		row1.annee = null;
		           		}
							
						if(2 < item_tRunJob_1.length){				
			           		
				           		row1.nom_patro = item_tRunJob_1[2];
			           		
		           		}else{
			           		row1.nom_patro = null;
		           		}
							
						if(3 < item_tRunJob_1.length){				
			           		
				           		row1.prenom = item_tRunJob_1[3];
			           		
		           		}else{
			           		row1.prenom = null;
		           		}
							
						if(4 < item_tRunJob_1.length){				
			           		
				           		row1.date_naiss = item_tRunJob_1[4];
			           		
		           		}else{
			           		row1.date_naiss = null;
		           		}
							
						if(5 < item_tRunJob_1.length){				
			           		
				           		row1.sexe = item_tRunJob_1[5];
			           		
		           		}else{
			           		row1.sexe = null;
		           		}
							
						if(6 < item_tRunJob_1.length){				
			           		
				           		row1.nationalite = item_tRunJob_1[6];
			           		
		           		}else{
			           		row1.nationalite = null;
		           		}
							
						if(7 < item_tRunJob_1.length){				
			           		
				           		row1.bac = item_tRunJob_1[7];
			           		
		           		}else{
			           		row1.bac = null;
		           		}
							
						if(8 < item_tRunJob_1.length){				
			           		
				           		row1.bur_distr = item_tRunJob_1[8];
			           		
		           		}else{
			           		row1.bur_distr = null;
		           		}
							
						if(9 < item_tRunJob_1.length){				
			           		
				           		row1.cod_pays = item_tRunJob_1[9];
			           		
		           		}else{
			           		row1.cod_pays = null;
		           		}
							
						if(10 < item_tRunJob_1.length){				
			           		
				           		row1.etape = item_tRunJob_1[10];
			           		
		           		}else{
			           		row1.etape = null;
		           		}
							
						if(11 < item_tRunJob_1.length){				
			           		
			           			row1.csp_par = ParserUtils.parseTo_Integer(item_tRunJob_1[11]);
			           		
		           		}else{
			           		row1.csp_par = null;
		           		}
							
						if(12 < item_tRunJob_1.length){				
			           		
				           		row1.cod_dep = item_tRunJob_1[12];
			           		
		           		}else{
			           		row1.cod_dep = null;
		           		}
							
						if(13 < item_tRunJob_1.length){				
			           		
				           		row1.cod_post = item_tRunJob_1[13];
			           		
		           		}else{
			           		row1.cod_post = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

								   				
	    				if(row1.code_etu != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.code_etu
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_0_tFileOutputExcel_1);
							int currentWith_0_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_0_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_0_tFileOutputExcel_1=currentWith_0_tFileOutputExcel_1>10?10:currentWith_0_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>currentWith_0_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[0]:currentWith_0_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.annee != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.annee
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_1_tFileOutputExcel_1);
							int currentWith_1_tFileOutputExcel_1 = cell_1_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>currentWith_1_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[1]:currentWith_1_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.nom_patro != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.nom_patro
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_2_tFileOutputExcel_1);
							int currentWith_2_tFileOutputExcel_1 = cell_2_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>currentWith_2_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[2]:currentWith_2_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.prenom != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.prenom
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_3_tFileOutputExcel_1);
							int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>currentWith_3_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[3]:currentWith_3_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.date_naiss != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.date_naiss
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_4_tFileOutputExcel_1);
							int currentWith_4_tFileOutputExcel_1 = cell_4_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[4]=fitWidth_tFileOutputExcel_1[4]>currentWith_4_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[4]:currentWith_4_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.sexe != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.sexe
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_5_tFileOutputExcel_1);
							int currentWith_5_tFileOutputExcel_1 = cell_5_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[5]=fitWidth_tFileOutputExcel_1[5]>currentWith_5_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[5]:currentWith_5_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.nationalite != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.nationalite
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_6_tFileOutputExcel_1);
							int currentWith_6_tFileOutputExcel_1 = cell_6_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[6]=fitWidth_tFileOutputExcel_1[6]>currentWith_6_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[6]:currentWith_6_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.bac != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.bac
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_7_tFileOutputExcel_1);
							int currentWith_7_tFileOutputExcel_1 = cell_7_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[7]=fitWidth_tFileOutputExcel_1[7]>currentWith_7_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[7]:currentWith_7_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.bur_distr != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 8;
					

					
						jxl.write.WritableCell cell_8_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.bur_distr
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_8_tFileOutputExcel_1);
							int currentWith_8_tFileOutputExcel_1 = cell_8_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[8]=fitWidth_tFileOutputExcel_1[8]>currentWith_8_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[8]:currentWith_8_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.cod_pays != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 9;
					

					
						jxl.write.WritableCell cell_9_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.cod_pays
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_9_tFileOutputExcel_1);
							int currentWith_9_tFileOutputExcel_1 = cell_9_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[9]=fitWidth_tFileOutputExcel_1[9]>currentWith_9_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[9]:currentWith_9_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.etape != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 10;
					

					
						jxl.write.WritableCell cell_10_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.etape
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_10_tFileOutputExcel_1);
							int currentWith_10_tFileOutputExcel_1 = cell_10_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[10]=fitWidth_tFileOutputExcel_1[10]>currentWith_10_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[10]:currentWith_10_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.csp_par != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 11;
					

					
						jxl.write.WritableCell cell_11_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.csp_par
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_11_tFileOutputExcel_1);
							int currentWith_11_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_11_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_11_tFileOutputExcel_1=currentWith_11_tFileOutputExcel_1>10?10:currentWith_11_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[11]=fitWidth_tFileOutputExcel_1[11]>currentWith_11_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[11]:currentWith_11_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.cod_dep != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 12;
					

					
						jxl.write.WritableCell cell_12_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.cod_dep
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_12_tFileOutputExcel_1);
							int currentWith_12_tFileOutputExcel_1 = cell_12_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[12]=fitWidth_tFileOutputExcel_1[12]>currentWith_12_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[12]:currentWith_12_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row1.cod_post != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 13;
					

					
						jxl.write.WritableCell cell_13_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row1.cod_post
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_13_tFileOutputExcel_1);
							int currentWith_13_tFileOutputExcel_1 = cell_13_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[13]=fitWidth_tFileOutputExcel_1[13]>currentWith_13_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[13]:currentWith_13_tFileOutputExcel_1+2;
	    				} 
					
    			nb_line_tFileOutputExcel_1++;
				
 
     row3 = row1;


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row4HashKey.Nom = row3.nom_patro ;
                        		    		
                        		    		row4HashKey.Prenom = row3.prenom ;
                        		    		
                        		    		row4HashKey.annee_diplome = row3.annee ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.provenance = row4.Provenance == null ? "" : row4.Provenance.equals("n+i") ? "N+i" : row4.Provenance;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.code_etu = row3.code_etu ;
out1_tmp.annee = row3.annee ;
out1_tmp.nom_patro = row3.nom_patro ;
out1_tmp.prenom = row3.prenom ;
out1_tmp.date_naiss = row3.date_naiss ;
out1_tmp.sexe = row3.sexe ;
out1_tmp.nationalite = row3.nationalite ;
out1_tmp.bac = row3.bac ;
out1_tmp.bur_distr = row3.bur_distr ;
out1_tmp.etape = row3.etape ;
out1_tmp.csp_par = row3.csp_par ;
out1_tmp.promo =  row4.promo ;
out1_tmp.niveau = row4.niveau ;
out1_tmp.Groupe = row4.Groupe ;
out1_tmp.Lv2 = row4.Lv2 ;
out1_tmp.Provenance = Var.provenance ;
out1_tmp.cod_pays = row3.cod_pays ;
out1_tmp.cod_dep = row3.cod_dep ;
out1_tmp.cod_post = row3.cod_post ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(out1.code_etu != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.code_etu
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.annee != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.annee
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.nom_patro != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.nom_patro
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.prenom != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.prenom
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.date_naiss != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.date_naiss
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.sexe != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.sexe
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.nationalite != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.nationalite
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.bac != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.bac
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.bur_distr != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.bur_distr
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.etape != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.etape
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.csp_par != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.csp_par
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.promo != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.promo
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.niveau != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.niveau
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Groupe != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Groupe
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Lv2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Lv2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Provenance != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Provenance
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.cod_pays != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.cod_pays
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.cod_dep != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.cod_dep
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.cod_post != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.cod_post
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

		writeableWorkbook_tFileOutputExcel_1.write();
		writeableWorkbook_tFileOutputExcel_1.close();
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Parent_fusion = new byte[0];
    static byte[] commonByteArray_EDD_ID_Parent_fusion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public String Lv2;

				public String getLv2 () {
					return this.Lv2;
				}
				
			    public String Provenance;

				public String getProvenance () {
					return this.Provenance;
				}
				
			    public String promo;

				public String getPromo () {
					return this.promo;
				}
				
			    public String niveau;

				public String getNiveau () {
					return this.niveau;
				}
				
			    public String annee_diplome;

				public String getAnnee_diplome () {
					return this.annee_diplome;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Nom == null) ? 0 : this.Nom.hashCode());
					
						result = prime * result + ((this.Prenom == null) ? 0 : this.Prenom.hashCode());
					
						result = prime * result + ((this.annee_diplome == null) ? 0 : this.annee_diplome.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.Nom == null) {
							if (other.Nom != null)
								return false;
						
						} else if (!this.Nom.equals(other.Nom))
						
							return false;
					
						if (this.Prenom == null) {
							if (other.Prenom != null)
								return false;
						
						} else if (!this.Prenom.equals(other.Prenom))
						
							return false;
					
						if (this.annee_diplome == null) {
							if (other.annee_diplome != null)
								return false;
						
						} else if (!this.annee_diplome.equals(other.annee_diplome))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.Nom = this.Nom;
	            other.Prenom = this.Prenom;
	            other.Groupe = this.Groupe;
	            other.Lv2 = this.Lv2;
	            other.Provenance = this.Provenance;
	            other.promo = this.promo;
	            other.niveau = this.niveau;
	            other.annee_diplome = this.annee_diplome;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.Nom = this.Nom;
	            	other.Prenom = this.Prenom;
	            	other.annee_diplome = this.annee_diplome;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Parent_fusion.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Parent_fusion.length == 0) {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Parent_fusion, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Parent_fusion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Parent_fusion) {

        	try {

        		int length = 0;
		
					this.Nom = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.annee_diplome = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Nom,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.annee_diplome,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Groupe = readString(dis,ois);
					
						this.Lv2 = readString(dis,ois);
					
						this.Provenance = readString(dis,ois);
					
						this.promo = readString(dis,ois);
					
						this.niveau = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Groupe, dos, oos);
					
						writeString(this.Lv2, dos, oos);
					
						writeString(this.Provenance, dos, oos);
					
						writeString(this.promo, dos, oos);
					
						writeString(this.niveau, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Nom="+Nom);
		sb.append(",Prenom="+Prenom);
		sb.append(",Groupe="+Groupe);
		sb.append(",Lv2="+Lv2);
		sb.append(",Provenance="+Provenance);
		sb.append(",promo="+promo);
		sb.append(",niveau="+niveau);
		sb.append(",annee_diplome="+annee_diplome);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Nom, other.Nom);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Prenom, other.Prenom);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.annee_diplome, other.annee_diplome);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Parent_fusion = new byte[0];
    static byte[] commonByteArray_EDD_ID_Parent_fusion = new byte[0];

	
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public String Lv2;

				public String getLv2 () {
					return this.Lv2;
				}
				
			    public String Provenance;

				public String getProvenance () {
					return this.Provenance;
				}
				
			    public String promo;

				public String getPromo () {
					return this.promo;
				}
				
			    public String niveau;

				public String getNiveau () {
					return this.niveau;
				}
				
			    public String annee_diplome;

				public String getAnnee_diplome () {
					return this.annee_diplome;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Parent_fusion.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Parent_fusion.length == 0) {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Parent_fusion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Parent_fusion, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Parent_fusion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Parent_fusion) {

        	try {

        		int length = 0;
		
					this.Nom = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Groupe = readString(dis);
					
					this.Lv2 = readString(dis);
					
					this.Provenance = readString(dis);
					
					this.promo = readString(dis);
					
					this.niveau = readString(dis);
					
					this.annee_diplome = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Nom,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Groupe,dos);
					
					// String
				
						writeString(this.Lv2,dos);
					
					// String
				
						writeString(this.Provenance,dos);
					
					// String
				
						writeString(this.promo,dos);
					
					// String
				
						writeString(this.niveau,dos);
					
					// String
				
						writeString(this.annee_diplome,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Nom="+Nom);
		sb.append(",Prenom="+Prenom);
		sb.append(",Groupe="+Groupe);
		sb.append(",Lv2="+Lv2);
		sb.append(",Provenance="+Provenance);
		sb.append(",promo="+promo);
		sb.append(",niveau="+niveau);
		sb.append(",annee_diplome="+annee_diplome);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row2Struct row4 = row2;





	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row4 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

			   		// connection name:row4
			   		// source node:tFileOutputExcel_2 - inputs:(row2) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,row4) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_2 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_2().limitLog4jByte();


		int columnIndex_tFileOutputExcel_2 = 0;
		
		int nb_line_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/out_promo.xls";
		java.io.File file_tFileOutputExcel_2 = new java.io.File(fileName_tFileOutputExcel_2);
		boolean isFileGenerated_tFileOutputExcel_2 = true;
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2.getParentFile();
          if (parentFile_tFileOutputExcel_2 != null && !parentFile_tFileOutputExcel_2.exists()) {
        	
             parentFile_tFileOutputExcel_2.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_2.setEncoding("ISO-8859-15");
		writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_2)), 
            		true, 
            		workbookSettings_tFileOutputExcel_2);       

        writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.getSheet("Sheet1");
        if(writableSheet_tFileOutputExcel_2 == null){
        	writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.createSheet("Sheet1", writeableWorkbook_tFileOutputExcel_2.getNumberOfSheets());
		}
		

        //modif start
        int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_2 = new int[8];
		for(int i_tFileOutputExcel_2=0;i_tFileOutputExcel_2<8;i_tFileOutputExcel_2++){
		    int fitCellViewSize_tFileOutputExcel_2=writableSheet_tFileOutputExcel_2.getColumnView(i_tFileOutputExcel_2).getSize();
			fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2]=fitCellViewSize_tFileOutputExcel_2/256;
			if(fitCellViewSize_tFileOutputExcel_2%256!=0){
				fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2]+=1;
			}
		}
		


		if (startRowNum_tFileOutputExcel_2 == 0){
	//modif end
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(0, nb_line_tFileOutputExcel_2, "Nom"
			));
		//modif end
		fitWidth_tFileOutputExcel_2[0]=fitWidth_tFileOutputExcel_2[0]>3?fitWidth_tFileOutputExcel_2[0]:3;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(1, nb_line_tFileOutputExcel_2, "Prenom"
			));
		//modif end
		fitWidth_tFileOutputExcel_2[1]=fitWidth_tFileOutputExcel_2[1]>6?fitWidth_tFileOutputExcel_2[1]:6;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(2, nb_line_tFileOutputExcel_2, "Groupe"
			));
		//modif end
		fitWidth_tFileOutputExcel_2[2]=fitWidth_tFileOutputExcel_2[2]>6?fitWidth_tFileOutputExcel_2[2]:6;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(3, nb_line_tFileOutputExcel_2, "Lv2"
			));
		//modif end
		fitWidth_tFileOutputExcel_2[3]=fitWidth_tFileOutputExcel_2[3]>3?fitWidth_tFileOutputExcel_2[3]:3;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(4, nb_line_tFileOutputExcel_2, "Provenance"
			));
		//modif end
		fitWidth_tFileOutputExcel_2[4]=fitWidth_tFileOutputExcel_2[4]>10?fitWidth_tFileOutputExcel_2[4]:10;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(5, nb_line_tFileOutputExcel_2, "promo"
			));
		//modif end
		fitWidth_tFileOutputExcel_2[5]=fitWidth_tFileOutputExcel_2[5]>5?fitWidth_tFileOutputExcel_2[5]:5;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(6, nb_line_tFileOutputExcel_2, "niveau"
			));
		//modif end
		fitWidth_tFileOutputExcel_2[6]=fitWidth_tFileOutputExcel_2[6]>6?fitWidth_tFileOutputExcel_2[6]:6;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(7, nb_line_tFileOutputExcel_2, "annee_diplome"
			));
		//modif end
		fitWidth_tFileOutputExcel_2[7]=fitWidth_tFileOutputExcel_2[7]>13?fitWidth_tFileOutputExcel_2[7]:13;
		nb_line_tFileOutputExcel_2 ++;
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
	
		edd_id.fusion_promo_0_1.Fusion_Promo childJob_tRunJob_2 = new edd_id.fusion_promo_0_1.Fusion_Promo();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getException().getClass().getName() + ": " + childJob_tRunJob_2.getException().getMessage());
				}
			
	  	
			for (String[] item_tRunJob_2 : childReturn_tRunJob_2) { 
				if(childJob_tRunJob_2.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_2.length){				
			           		
				           		row2.Nom = item_tRunJob_2[0];
			           		
		           		}else{
			           		row2.Nom = null;
		           		}
							
						if(1 < item_tRunJob_2.length){				
			           		
				           		row2.Prenom = item_tRunJob_2[1];
			           		
		           		}else{
			           		row2.Prenom = null;
		           		}
							
						if(2 < item_tRunJob_2.length){				
			           		
				           		row2.Groupe = item_tRunJob_2[2];
			           		
		           		}else{
			           		row2.Groupe = null;
		           		}
							
						if(3 < item_tRunJob_2.length){				
			           		
				           		row2.Lv2 = item_tRunJob_2[3];
			           		
		           		}else{
			           		row2.Lv2 = null;
		           		}
							
						if(4 < item_tRunJob_2.length){				
			           		
				           		row2.Provenance = item_tRunJob_2[4];
			           		
		           		}else{
			           		row2.Provenance = null;
		           		}
							
						if(5 < item_tRunJob_2.length){				
			           		
				           		row2.promo = item_tRunJob_2[5];
			           		
		           		}else{
			           		row2.promo = null;
		           		}
							
						if(6 < item_tRunJob_2.length){				
			           		
				           		row2.niveau = item_tRunJob_2[6];
			           		
		           		}else{
			           		row2.niveau = null;
		           		}
							
						if(7 < item_tRunJob_2.length){				
			           		
				           		row2.annee_diplome = item_tRunJob_2[7];
			           		
		           		}else{
			           		row2.annee_diplome = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

								   				
	    				if(row2.Nom != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row2.Nom
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_0_tFileOutputExcel_2);
							int currentWith_0_tFileOutputExcel_2 = cell_0_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[0]=fitWidth_tFileOutputExcel_2[0]>currentWith_0_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[0]:currentWith_0_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row2.Prenom != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row2.Prenom
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_1_tFileOutputExcel_2);
							int currentWith_1_tFileOutputExcel_2 = cell_1_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[1]=fitWidth_tFileOutputExcel_2[1]>currentWith_1_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[1]:currentWith_1_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row2.Groupe != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row2.Groupe
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_2_tFileOutputExcel_2);
							int currentWith_2_tFileOutputExcel_2 = cell_2_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[2]=fitWidth_tFileOutputExcel_2[2]>currentWith_2_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[2]:currentWith_2_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row2.Lv2 != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row2.Lv2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_3_tFileOutputExcel_2);
							int currentWith_3_tFileOutputExcel_2 = cell_3_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[3]=fitWidth_tFileOutputExcel_2[3]>currentWith_3_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[3]:currentWith_3_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row2.Provenance != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row2.Provenance
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_4_tFileOutputExcel_2);
							int currentWith_4_tFileOutputExcel_2 = cell_4_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[4]=fitWidth_tFileOutputExcel_2[4]>currentWith_4_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[4]:currentWith_4_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row2.promo != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row2.promo
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_5_tFileOutputExcel_2);
							int currentWith_5_tFileOutputExcel_2 = cell_5_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[5]=fitWidth_tFileOutputExcel_2[5]>currentWith_5_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[5]:currentWith_5_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row2.niveau != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row2.niveau
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_6_tFileOutputExcel_2);
							int currentWith_6_tFileOutputExcel_2 = cell_6_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[6]=fitWidth_tFileOutputExcel_2[6]>currentWith_6_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[6]:currentWith_6_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row2.annee_diplome != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row2.annee_diplome
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_7_tFileOutputExcel_2);
							int currentWith_7_tFileOutputExcel_2 = cell_7_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[7]=fitWidth_tFileOutputExcel_2[7]>currentWith_7_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[7]:currentWith_7_tFileOutputExcel_2+2;
	    				} 
					
    			nb_line_tFileOutputExcel_2++;
				
 
     row4 = row2;


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.Nom = row4.Nom;
				
				row4_HashRow.Prenom = row4.Prenom;
				
				row4_HashRow.Groupe = row4.Groupe;
				
				row4_HashRow.Lv2 = row4.Lv2;
				
				row4_HashRow.Provenance = row4.Provenance;
				
				row4_HashRow.promo = row4.promo;
				
				row4_HashRow.niveau = row4.niveau;
				
				row4_HashRow.annee_diplome = row4.annee_diplome;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

		writeableWorkbook_tFileOutputExcel_2.write();
		writeableWorkbook_tFileOutputExcel_2.close();
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Parent_fusion Parent_fusionClass = new Parent_fusion();

        int exitCode = Parent_fusionClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Parent_fusion.class.getClassLoader().getResourceAsStream("edd_id/parent_fusion_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Parent_fusion.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Parent_fusion");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     149469 characters generated by Talend Open Studio for MDM 
 *     on the 24 juin 2019 15:17:02 CEST
 ************************************************************************************************/