// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for MDM
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bdd_id.jobpere_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.MDM;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: JobPere Purpose: regrouper les jobs<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class JobPere implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "JobPere";
	private final String projectName = "BDD_ID";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					JobPere.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(JobPere.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BDD_ID_JobPere = new byte[0];
		static byte[] commonByteArray_BDD_ID_JobPere = new byte[0];

		public String job;

		public String getJob() {
			return this.job;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BDD_ID_JobPere.length) {
					if (length < 1024
							&& commonByteArray_BDD_ID_JobPere.length == 0) {
						commonByteArray_BDD_ID_JobPere = new byte[1024];
					} else {
						commonByteArray_BDD_ID_JobPere = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BDD_ID_JobPere, 0, length);
				strReturn = new String(commonByteArray_BDD_ID_JobPere, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BDD_ID_JobPere) {

				try {

					int length = 0;

					this.job = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.job, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("job=" + job);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tRunJob_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tFlowToIterate_1 = 0;

				class BytesLimit65535_tFlowToIterate_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_1().limitLog4jByte();

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				class BytesLimit65535_tFixedFlowInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

				StringBuilder result_tFixedFlowInput_1 = new StringBuilder();
				result_tFixedFlowInput_1
						.append("RGVsZXRlREINClRocmVlVG9PbmUNClRvRGF0YWJhc2VfDQpUb0RhdGFiYXNlX0VwcmV1dmUNClRv");
				result_tFixedFlowInput_1
						.append("RGF0YWJhc2VDb252b2NhdGlvbg0KVG9EYXRhYmFzZUZpbg==");
				String originalFileContent_tFixedFlowInput_1 = "";
				try {
					originalFileContent_tFixedFlowInput_1 = new String(
							(new sun.misc.BASE64Decoder()).decodeBuffer(result_tFixedFlowInput_1
									.toString()), utf8Charset);
				} catch (java.lang.Exception e) {
					e.printStackTrace();
				}

				int nb_line_tFixedFlowInput_1 = 0;

				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

					java.io.InputStream ins_tFixedFlowInput_1 = new java.io.ByteArrayInputStream(
							originalFileContent_tFixedFlowInput_1
									.getBytes(utf8Charset));
					org.talend.fileprocess.FileInputDelimited fid_tFixedFlowInput_1 = new org.talend.fileprocess.FileInputDelimited(
							ins_tFixedFlowInput_1, utf8Charset, ";", "\n",
							true, 0, 0, -1, -1, false);

					while (fid_tFixedFlowInput_1.nextRecord()) {
						nb_line_tFixedFlowInput_1++;
						row1 = new row1Struct();

						if (0 < fid_tFixedFlowInput_1
								.getColumnsCountOfCurrentRow()) {
							String colContent = fid_tFixedFlowInput_1.get(0);
							row1.job = (colContent == null || colContent
									.length() == 0) ? null : colContent;
						} else {

							row1.job = null;

						}

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 process_data_begin ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						/**
						 * [tFixedFlowInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFlowToIterate_1 main ] start
						 */

						currentComponent = "tFlowToIterate_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						globalMap.put("row1.job", row1.job);

						nb_line_tFlowToIterate_1++;
						counter_tFlowToIterate_1++;
						globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
								counter_tFlowToIterate_1);

						tos_count_tFlowToIterate_1++;

						/**
						 * [tFlowToIterate_1 main ] stop
						 */

						/**
						 * [tFlowToIterate_1 process_data_begin ] start
						 */

						currentComponent = "tFlowToIterate_1";

						/**
						 * [tFlowToIterate_1 process_data_begin ] stop
						 */
						NB_ITERATE_tRunJob_1++;

						if (execStat) {
							runStat.updateStatOnConnection("iterate1", 1,
									"exec" + NB_ITERATE_tRunJob_1);
							// Thread.sleep(1000);
						}

						/**
						 * [tRunJob_1 begin ] start
						 */

						ok_Hash.put("tRunJob_1", false);
						start_Hash.put("tRunJob_1", System.currentTimeMillis());

						currentComponent = "tRunJob_1";

						int tos_count_tRunJob_1 = 0;

						class BytesLimit65535_tRunJob_1 {
							public void limitLog4jByte() throws Exception {

							}
						}

						new BytesLimit65535_tRunJob_1().limitLog4jByte();
						class DealChildJobLibrary_tRunJob_1 {

							public String replaceJarPathsFromCrcMap(
									String originalClassPathLine)
									throws java.lang.Exception {
								String classPathLine = "";
								String crcMapPath = new java.io.File(
										"../crcMap").getCanonicalPath();
								if (isNeedAddLibsPath(crcMapPath)) {
									java.util.Map<String, String> crcMap = null;
									java.io.ObjectInputStream ois = new ObjectInputStream(
											new java.io.FileInputStream(
													crcMapPath));
									crcMap = (java.util.Map<String, String>) ois
											.readObject();
									ois.close();
									classPathLine = addLibsPath(
											originalClassPathLine, crcMap);
								} else {
									classPathLine = originalClassPathLine;
								}
								return classPathLine;
							}

							private boolean isNeedAddLibsPath(String crcMapPath) {
								if (!(new java.io.File(crcMapPath).exists())) {// when
																				// not
																				// use
																				// cache
									return false;
								}
								return true;
							}

							private String addLibsPath(String line,
									java.util.Map<String, String> crcMap) {
								for (java.util.Map.Entry<String, String> entry : crcMap
										.entrySet()) {
									line = adaptLibPaths(line, entry);
								}
								return line;
							}

							private String adaptLibPaths(String line,
									java.util.Map.Entry<String, String> entry) {
								String jarName = entry.getValue();
								String crc = entry.getKey();
								String libStringFinder = "../lib/" + jarName;
								if (line.contains(libStringFinder)) {
									line = line.replace(libStringFinder,
											"../../../cache/lib/" + crc + "/"
													+ jarName);
								} else if (line.contains(":$ROOT_PATH/"
										+ jarName + ":")) {
									line = line
											.replace(":$ROOT_PATH/" + jarName
													+ ":",
													":$ROOT_PATH/../../../cache/lib/"
															+ crc + "/"
															+ jarName + ":");
								} else if (line.contains(";" + jarName + ";")) {
									line = line.replace(";" + jarName + ";",
											";../../../cache/lib/" + crc + "/"
													+ jarName + ";");
								}
								return line;
							}

						}
						DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

						// For different jobs, job name must be different, but
						// classpath and JVM arguments are possbilely different
						java.util.Map<String, List<String>> childJob_commandLine_Mapper_tRunJob_1 = new java.util.HashMap<String, List<String>>();
						java.util.List<String> childJob_commandLine_tRunJob_1 = null;
						String classpathSeparator_tRunJob_1 = System
								.getProperty("path.separator");

						childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();

						childJob_commandLine_tRunJob_1
								.add("C:/Program Files/Java/jre1.8.0_211/bin/java.exe");

						childJob_commandLine_tRunJob_1.add("-Xms256M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-Xmx1024M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("-Dfile.encoding=UTF-8".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-cp".replaceAll(
								";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add(dealChildJobLibrary_tRunJob_1
										.replaceJarPathsFromCrcMap(
												"C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/BDD_ID/poms/jobs/process/deletedb_0.1/target/classpath.jar;")
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("bdd_id.deletedb_0_1.DeleteDB".replaceAll(
										";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--father_pid="
								+ pid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--root_pid="
								+ rootPid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("--father_node=tRunJob_1".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--context=Default"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",
								classpathSeparator_tRunJob_1));

						childJob_commandLine_Mapper_tRunJob_1.put("DeleteDB",
								childJob_commandLine_tRunJob_1);

						childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();

						childJob_commandLine_tRunJob_1
								.add("C:/Program Files/Java/jre1.8.0_211/bin/java.exe");

						childJob_commandLine_tRunJob_1.add("-Xms256M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-Xmx1024M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("-Dfile.encoding=UTF-8".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-cp".replaceAll(
								";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add(dealChildJobLibrary_tRunJob_1
										.replaceJarPathsFromCrcMap(
												"C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/BDD_ID/poms/jobs/process/threetoone_0.1/target/classpath.jar;")
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("bdd_id.threetoone_0_1.ThreeToOne"
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--father_pid="
								+ pid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--root_pid="
								+ rootPid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("--father_node=tRunJob_1".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--context=Default"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",
								classpathSeparator_tRunJob_1));

						childJob_commandLine_Mapper_tRunJob_1.put("ThreeToOne",
								childJob_commandLine_tRunJob_1);

						childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();

						childJob_commandLine_tRunJob_1
								.add("C:/Program Files/Java/jre1.8.0_211/bin/java.exe");

						childJob_commandLine_tRunJob_1.add("-Xms256M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-Xmx1024M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("-Dfile.encoding=UTF-8".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-cp".replaceAll(
								";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add(dealChildJobLibrary_tRunJob_1
										.replaceJarPathsFromCrcMap(
												"C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/BDD_ID/poms/jobs/process/todatabase__0.1/target/classpath.jar;")
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("bdd_id.todatabase__0_1.ToDatabase_"
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--father_pid="
								+ pid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--root_pid="
								+ rootPid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("--father_node=tRunJob_1".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--context=Default"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",
								classpathSeparator_tRunJob_1));

						childJob_commandLine_Mapper_tRunJob_1.put(
								"ToDatabase_", childJob_commandLine_tRunJob_1);

						childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();

						childJob_commandLine_tRunJob_1
								.add("C:/Program Files/Java/jre1.8.0_211/bin/java.exe");

						childJob_commandLine_tRunJob_1.add("-Xms256M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-Xmx1024M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("-Dfile.encoding=UTF-8".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-cp".replaceAll(
								";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add(dealChildJobLibrary_tRunJob_1
										.replaceJarPathsFromCrcMap(
												"C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/BDD_ID/poms/jobs/process/todatabase_epreuve_0.1/target/classpath.jar;")
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("bdd_id.todatabase_epreuve_0_1.ToDatabase_Epreuve"
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--father_pid="
								+ pid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--root_pid="
								+ rootPid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("--father_node=tRunJob_1".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--context=Default"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",
								classpathSeparator_tRunJob_1));

						childJob_commandLine_Mapper_tRunJob_1.put(
								"ToDatabase_Epreuve",
								childJob_commandLine_tRunJob_1);

						childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();

						childJob_commandLine_tRunJob_1
								.add("C:/Program Files/Java/jre1.8.0_211/bin/java.exe");

						childJob_commandLine_tRunJob_1.add("-Xms256M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-Xmx1024M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("-Dfile.encoding=UTF-8".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-cp".replaceAll(
								";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add(dealChildJobLibrary_tRunJob_1
										.replaceJarPathsFromCrcMap(
												"C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/BDD_ID/poms/jobs/process/todatabaseconvocation_0.1/target/classpath.jar;")
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("bdd_id.todatabaseconvocation_0_1.ToDatabaseConvocation"
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--father_pid="
								+ pid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--root_pid="
								+ rootPid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("--father_node=tRunJob_1".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--context=Default"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",
								classpathSeparator_tRunJob_1));

						childJob_commandLine_Mapper_tRunJob_1.put(
								"ToDatabaseConvocation",
								childJob_commandLine_tRunJob_1);

						childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();

						childJob_commandLine_tRunJob_1
								.add("C:/Program Files/Java/jre1.8.0_211/bin/java.exe");

						childJob_commandLine_tRunJob_1.add("-Xms256M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-Xmx1024M"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("-Dfile.encoding=UTF-8".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("-cp".replaceAll(
								";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add(dealChildJobLibrary_tRunJob_1
										.replaceJarPathsFromCrcMap(
												"C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/BDD_ID/poms/jobs/process/todatabasefin_0.1/target/classpath.jar;")
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("bdd_id.todatabasefin_0_1.ToDatabaseFin"
										.replaceAll(";",
												classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--father_pid="
								+ pid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--root_pid="
								+ rootPid.replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1
								.add("--father_node=tRunJob_1".replaceAll(";",
										classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("--context=Default"
								.replaceAll(";", classpathSeparator_tRunJob_1));

						childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",
								classpathSeparator_tRunJob_1));

						childJob_commandLine_Mapper_tRunJob_1
								.put("ToDatabaseFin",
										childJob_commandLine_tRunJob_1);

						/**
						 * [tRunJob_1 begin ] stop
						 */

						/**
						 * [tRunJob_1 main ] start
						 */

						currentComponent = "tRunJob_1";

						java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

						if (childJob_commandLine_Mapper_tRunJob_1
								.get(((String) globalMap.get("row1.job"))) == null) {
							throw new RuntimeException("The child job named "
									+ ((String) globalMap.get("row1.job"))
									+ " is not in the job list.");
						}
						paraList_tRunJob_1
								.addAll(childJob_commandLine_Mapper_tRunJob_1
										.get(((String) globalMap
												.get("row1.job"))));

						// for feature:10589

						paraList_tRunJob_1.add("--stat_port=" + null);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_1.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_1 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_1 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
								&& childResumePath_tRunJob_1 != null) {
							paraList_tRunJob_1
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_1.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_1");

						java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

						Object obj_tRunJob_1 = null;

						Runtime runtime_tRunJob_1 = Runtime.getRuntime();
						final Process ps_tRunJob_1;
						ps_tRunJob_1 = runtime_tRunJob_1
								.exec((String[]) paraList_tRunJob_1
										.toArray(new String[paraList_tRunJob_1
												.size()]));

						Thread normal_tRunJob_1 = new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													ps_tRunJob_1
															.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};

						normal_tRunJob_1.start();

						final StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
						Thread error_tRunJob_1 = new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													ps_tRunJob_1
															.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											errorMsg_tRunJob_1.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
						error_tRunJob_1.start();

						// 0 indicates normal termination
						int result_tRunJob_1 = ps_tRunJob_1.waitFor();
						normal_tRunJob_1.join(10000);
						error_tRunJob_1.join(10000);

						globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
								result_tRunJob_1);
						if (result_tRunJob_1 != 0) {
							globalMap.put(
									"tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
									errorMsg_tRunJob_1.toString());

							throw new RuntimeException("Child job returns "
									+ result_tRunJob_1
									+ ". It doesn't terminate normally.\n"
									+ errorMsg_tRunJob_1.toString());

						}

						tos_count_tRunJob_1++;

						/**
						 * [tRunJob_1 main ] stop
						 */

						/**
						 * [tRunJob_1 process_data_begin ] start
						 */

						currentComponent = "tRunJob_1";

						/**
						 * [tRunJob_1 process_data_begin ] stop
						 */

						/**
						 * [tRunJob_1 process_data_end ] start
						 */

						currentComponent = "tRunJob_1";

						/**
						 * [tRunJob_1 process_data_end ] stop
						 */

						/**
						 * [tRunJob_1 end ] start
						 */

						currentComponent = "tRunJob_1";

						ok_Hash.put("tRunJob_1", true);
						end_Hash.put("tRunJob_1", System.currentTimeMillis());

						/**
						 * [tRunJob_1 end ] stop
						 */
						if (execStat) {
							runStat.updateStatOnConnection("iterate1", 2,
									"exec" + NB_ITERATE_tRunJob_1);
						}

						/**
						 * [tFlowToIterate_1 process_data_end ] start
						 */

						currentComponent = "tFlowToIterate_1";

						/**
						 * [tFlowToIterate_1 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_1 process_data_end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						/**
						 * [tFixedFlowInput_1 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
					fid_tFixedFlowInput_1.close();
				}

				globalMap.put("tFixedFlowInput_1_NB_LINE",
						nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final JobPere JobPereClass = new JobPere();

		int exitCode = JobPereClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = JobPere.class.getClassLoader()
					.getResourceAsStream(
							"bdd_id/jobpere_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = JobPere.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFixedFlowInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFixedFlowInput_1) {
			globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", -1);

			e_tFixedFlowInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : JobPere");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 49790 characters generated by Talend Open Studio for MDM on the 24 juin 2019
 * 15:13:47 CEST
 ************************************************************************************************/
