// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for MDM
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package edd_id.cleanedd_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.MDM;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: CleanEDD Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class CleanEDD implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CleanEDD";
	private final String projectName = "EDD_ID";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CleanEDD.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CleanEDD.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";

	
		int tos_count_tDBRow_2 = 0;
		
    	class BytesLimit65535_tDBRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_2().limitLog4jByte();

	java.sql.Connection conn_tDBRow_2 = null;
	String query_tDBRow_2 = "";
	boolean whetherReject_tDBRow_2 = false;
			String driverClass_tDBRow_2 = "org.gjt.mm.mysql.Driver";
		    java.lang.Class.forName(driverClass_tDBRow_2);
		
				String url_tDBRow_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "entrepotrattrapage" + "?" + "noDatetimeStringSync=true";
					String dbUser_tDBRow_2 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_2 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");
        		   	
        	        String dbPwd_tDBRow_2 = decryptedPassword_tDBRow_2;
	        
					
			conn_tDBRow_2 = java.sql.DriverManager.getConnection(url_tDBRow_2,dbUser_tDBRow_2,dbPwd_tDBRow_2);
		
					if(conn_tDBRow_2.getAutoCommit()) {
						
				conn_tDBRow_2.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_2 = 10000;
					int commitCounter_tDBRow_2 = 0;
				
		java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2.createStatement();
	

 



/**
 * [tDBRow_2 begin ] stop
 */
	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

query_tDBRow_2 = "DELETE\nFROM `d_age`";
whetherReject_tDBRow_2 = false;
globalMap.put("tDBRow_2_QUERY",query_tDBRow_2);
try {
		stmt_tDBRow_2.execute(query_tDBRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_2) {
		
	}
	
		commitCounter_tDBRow_2++;
		if(commitEvery_tDBRow_2 <= commitCounter_tDBRow_2) {
			
			conn_tDBRow_2.commit();
			
			commitCounter_tDBRow_2=0;
		}
		

 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

	
	stmt_tDBRow_2.close();	
		if(commitEvery_tDBRow_2>commitCounter_tDBRow_2){

			
			conn_tDBRow_2.commit();
			
	
			commitCounter_tDBRow_2=0;
	
		}
			conn_tDBRow_2.close();
			

 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBRow_16Process(globalMap);



/**
 * [tDBRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_16", false);
		start_Hash.put("tDBRow_16", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_16";

	
		int tos_count_tDBRow_16 = 0;
		
    	class BytesLimit65535_tDBRow_16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_16().limitLog4jByte();

	java.sql.Connection conn_tDBRow_16 = null;
	String query_tDBRow_16 = "";
	boolean whetherReject_tDBRow_16 = false;
			String driverClass_tDBRow_16 = "org.gjt.mm.mysql.Driver";
		    java.lang.Class.forName(driverClass_tDBRow_16);
		
				String url_tDBRow_16 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "entrepotrattrapage" + "?" + "noDatetimeStringSync=true";
					String dbUser_tDBRow_16 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_16 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");
        		   	
        	        String dbPwd_tDBRow_16 = decryptedPassword_tDBRow_16;
	        
					
			conn_tDBRow_16 = java.sql.DriverManager.getConnection(url_tDBRow_16,dbUser_tDBRow_16,dbPwd_tDBRow_16);
		
					if(conn_tDBRow_16.getAutoCommit()) {
						
				conn_tDBRow_16.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_16 = 10000;
					int commitCounter_tDBRow_16 = 0;
				
		java.sql.Statement stmt_tDBRow_16 = conn_tDBRow_16.createStatement();
	

 



/**
 * [tDBRow_16 begin ] stop
 */
	
	/**
	 * [tDBRow_16 main ] start
	 */

	

	
	
	currentComponent="tDBRow_16";

	

query_tDBRow_16 = "DELETE\nFROM `etudiants`";
whetherReject_tDBRow_16 = false;
globalMap.put("tDBRow_16_QUERY",query_tDBRow_16);
try {
		stmt_tDBRow_16.execute(query_tDBRow_16);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_16 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_16++;
		if(commitEvery_tDBRow_16 <= commitCounter_tDBRow_16) {
			
			conn_tDBRow_16.commit();
			
			commitCounter_tDBRow_16=0;
		}
		

 


	tos_count_tDBRow_16++;

/**
 * [tDBRow_16 main ] stop
 */
	
	/**
	 * [tDBRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_16";

	

 



/**
 * [tDBRow_16 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_16";

	

 



/**
 * [tDBRow_16 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_16 end ] start
	 */

	

	
	
	currentComponent="tDBRow_16";

	

	
	stmt_tDBRow_16.close();	
		if(commitEvery_tDBRow_16>commitCounter_tDBRow_16){

			
			conn_tDBRow_16.commit();
			
	
			commitCounter_tDBRow_16=0;
	
		}
			conn_tDBRow_16.close();
			

 

ok_Hash.put("tDBRow_16", true);
end_Hash.put("tDBRow_16", System.currentTimeMillis());




/**
 * [tDBRow_16 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_16 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_16";

	

 



/**
 * [tDBRow_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_16_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_4", false);
		start_Hash.put("tDBRow_4", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_4";

	
		int tos_count_tDBRow_4 = 0;
		
    	class BytesLimit65535_tDBRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_4().limitLog4jByte();

	java.sql.Connection conn_tDBRow_4 = null;
	String query_tDBRow_4 = "";
	boolean whetherReject_tDBRow_4 = false;
			String driverClass_tDBRow_4 = "org.gjt.mm.mysql.Driver";
		    java.lang.Class.forName(driverClass_tDBRow_4);
		
				String url_tDBRow_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "entrepotrattrapage" + "?" + "noDatetimeStringSync=true";
					String dbUser_tDBRow_4 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_4 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");
        		   	
        	        String dbPwd_tDBRow_4 = decryptedPassword_tDBRow_4;
	        
					
			conn_tDBRow_4 = java.sql.DriverManager.getConnection(url_tDBRow_4,dbUser_tDBRow_4,dbPwd_tDBRow_4);
		
					if(conn_tDBRow_4.getAutoCommit()) {
						
				conn_tDBRow_4.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_4 = 10000;
					int commitCounter_tDBRow_4 = 0;
				
		java.sql.Statement stmt_tDBRow_4 = conn_tDBRow_4.createStatement();
	

 



/**
 * [tDBRow_4 begin ] stop
 */
	
	/**
	 * [tDBRow_4 main ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

query_tDBRow_4 = "DELETE\nFROM `d_bac`";
whetherReject_tDBRow_4 = false;
globalMap.put("tDBRow_4_QUERY",query_tDBRow_4);
try {
		stmt_tDBRow_4.execute(query_tDBRow_4);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_4 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_4) {
		
	}
	
		commitCounter_tDBRow_4++;
		if(commitEvery_tDBRow_4 <= commitCounter_tDBRow_4) {
			
			conn_tDBRow_4.commit();
			
			commitCounter_tDBRow_4=0;
		}
		

 


	tos_count_tDBRow_4++;

/**
 * [tDBRow_4 main ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_4 end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

	
	stmt_tDBRow_4.close();	
		if(commitEvery_tDBRow_4>commitCounter_tDBRow_4){

			
			conn_tDBRow_4.commit();
			
	
			commitCounter_tDBRow_4=0;
	
		}
			conn_tDBRow_4.close();
			

 

ok_Hash.put("tDBRow_4", true);
end_Hash.put("tDBRow_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBRow_16Process(globalMap);



/**
 * [tDBRow_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_4 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_8", false);
		start_Hash.put("tDBRow_8", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_8";

	
		int tos_count_tDBRow_8 = 0;
		
    	class BytesLimit65535_tDBRow_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_8().limitLog4jByte();

	java.sql.Connection conn_tDBRow_8 = null;
	String query_tDBRow_8 = "";
	boolean whetherReject_tDBRow_8 = false;
			String driverClass_tDBRow_8 = "org.gjt.mm.mysql.Driver";
		    java.lang.Class.forName(driverClass_tDBRow_8);
		
				String url_tDBRow_8 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "entrepotrattrapage" + "?" + "noDatetimeStringSync=true";
					String dbUser_tDBRow_8 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_8 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");
        		   	
        	        String dbPwd_tDBRow_8 = decryptedPassword_tDBRow_8;
	        
					
			conn_tDBRow_8 = java.sql.DriverManager.getConnection(url_tDBRow_8,dbUser_tDBRow_8,dbPwd_tDBRow_8);
		
					if(conn_tDBRow_8.getAutoCommit()) {
						
				conn_tDBRow_8.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_8 = 10000;
					int commitCounter_tDBRow_8 = 0;
				
		java.sql.Statement stmt_tDBRow_8 = conn_tDBRow_8.createStatement();
	

 



/**
 * [tDBRow_8 begin ] stop
 */
	
	/**
	 * [tDBRow_8 main ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

query_tDBRow_8 = "DELETE\nFROM `d_etu`";
whetherReject_tDBRow_8 = false;
globalMap.put("tDBRow_8_QUERY",query_tDBRow_8);
try {
		stmt_tDBRow_8.execute(query_tDBRow_8);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_8 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_8) {
		
	}
	
		commitCounter_tDBRow_8++;
		if(commitEvery_tDBRow_8 <= commitCounter_tDBRow_8) {
			
			conn_tDBRow_8.commit();
			
			commitCounter_tDBRow_8=0;
		}
		

 


	tos_count_tDBRow_8++;

/**
 * [tDBRow_8 main ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

 



/**
 * [tDBRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

 



/**
 * [tDBRow_8 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_8 end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

	
	stmt_tDBRow_8.close();	
		if(commitEvery_tDBRow_8>commitCounter_tDBRow_8){

			
			conn_tDBRow_8.commit();
			
	
			commitCounter_tDBRow_8=0;
	
		}
			conn_tDBRow_8.close();
			

 

ok_Hash.put("tDBRow_8", true);
end_Hash.put("tDBRow_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBRow_16Process(globalMap);



/**
 * [tDBRow_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_8 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

 



/**
 * [tDBRow_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_10", false);
		start_Hash.put("tDBRow_10", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_10";

	
		int tos_count_tDBRow_10 = 0;
		
    	class BytesLimit65535_tDBRow_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_10().limitLog4jByte();

	java.sql.Connection conn_tDBRow_10 = null;
	String query_tDBRow_10 = "";
	boolean whetherReject_tDBRow_10 = false;
			String driverClass_tDBRow_10 = "org.gjt.mm.mysql.Driver";
		    java.lang.Class.forName(driverClass_tDBRow_10);
		
				String url_tDBRow_10 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "entrepotrattrapage" + "?" + "noDatetimeStringSync=true";
					String dbUser_tDBRow_10 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_10 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");
        		   	
        	        String dbPwd_tDBRow_10 = decryptedPassword_tDBRow_10;
	        
					
			conn_tDBRow_10 = java.sql.DriverManager.getConnection(url_tDBRow_10,dbUser_tDBRow_10,dbPwd_tDBRow_10);
		
					if(conn_tDBRow_10.getAutoCommit()) {
						
				conn_tDBRow_10.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_10 = 10000;
					int commitCounter_tDBRow_10 = 0;
				
		java.sql.Statement stmt_tDBRow_10 = conn_tDBRow_10.createStatement();
	

 



/**
 * [tDBRow_10 begin ] stop
 */
	
	/**
	 * [tDBRow_10 main ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

query_tDBRow_10 = "DELETE\nFROM `d_geo`";
whetherReject_tDBRow_10 = false;
globalMap.put("tDBRow_10_QUERY",query_tDBRow_10);
try {
		stmt_tDBRow_10.execute(query_tDBRow_10);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_10 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_10) {
		
	}
	
		commitCounter_tDBRow_10++;
		if(commitEvery_tDBRow_10 <= commitCounter_tDBRow_10) {
			
			conn_tDBRow_10.commit();
			
			commitCounter_tDBRow_10=0;
		}
		

 


	tos_count_tDBRow_10++;

/**
 * [tDBRow_10 main ] stop
 */
	
	/**
	 * [tDBRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

 



/**
 * [tDBRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

 



/**
 * [tDBRow_10 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_10 end ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

	
	stmt_tDBRow_10.close();	
		if(commitEvery_tDBRow_10>commitCounter_tDBRow_10){

			
			conn_tDBRow_10.commit();
			
	
			commitCounter_tDBRow_10=0;
	
		}
			conn_tDBRow_10.close();
			

 

ok_Hash.put("tDBRow_10", true);
end_Hash.put("tDBRow_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBRow_16Process(globalMap);



/**
 * [tDBRow_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_10 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

 



/**
 * [tDBRow_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_10_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_12", false);
		start_Hash.put("tDBRow_12", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_12";

	
		int tos_count_tDBRow_12 = 0;
		
    	class BytesLimit65535_tDBRow_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_12().limitLog4jByte();

	java.sql.Connection conn_tDBRow_12 = null;
	String query_tDBRow_12 = "";
	boolean whetherReject_tDBRow_12 = false;
			String driverClass_tDBRow_12 = "org.gjt.mm.mysql.Driver";
		    java.lang.Class.forName(driverClass_tDBRow_12);
		
				String url_tDBRow_12 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "entrepotrattrapage" + "?" + "noDatetimeStringSync=true";
					String dbUser_tDBRow_12 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_12 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");
        		   	
        	        String dbPwd_tDBRow_12 = decryptedPassword_tDBRow_12;
	        
					
			conn_tDBRow_12 = java.sql.DriverManager.getConnection(url_tDBRow_12,dbUser_tDBRow_12,dbPwd_tDBRow_12);
		
					if(conn_tDBRow_12.getAutoCommit()) {
						
				conn_tDBRow_12.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_12 = 10000;
					int commitCounter_tDBRow_12 = 0;
				
		java.sql.Statement stmt_tDBRow_12 = conn_tDBRow_12.createStatement();
	

 



/**
 * [tDBRow_12 begin ] stop
 */
	
	/**
	 * [tDBRow_12 main ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

query_tDBRow_12 = "DELETE\nFROM `d_nationalite`";
whetherReject_tDBRow_12 = false;
globalMap.put("tDBRow_12_QUERY",query_tDBRow_12);
try {
		stmt_tDBRow_12.execute(query_tDBRow_12);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_12 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_12) {
		
	}
	
		commitCounter_tDBRow_12++;
		if(commitEvery_tDBRow_12 <= commitCounter_tDBRow_12) {
			
			conn_tDBRow_12.commit();
			
			commitCounter_tDBRow_12=0;
		}
		

 


	tos_count_tDBRow_12++;

/**
 * [tDBRow_12 main ] stop
 */
	
	/**
	 * [tDBRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

 



/**
 * [tDBRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

 



/**
 * [tDBRow_12 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_12 end ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

	
	stmt_tDBRow_12.close();	
		if(commitEvery_tDBRow_12>commitCounter_tDBRow_12){

			
			conn_tDBRow_12.commit();
			
	
			commitCounter_tDBRow_12=0;
	
		}
			conn_tDBRow_12.close();
			

 

ok_Hash.put("tDBRow_12", true);
end_Hash.put("tDBRow_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBRow_16Process(globalMap);



/**
 * [tDBRow_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_12 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

 



/**
 * [tDBRow_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_12_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_14", false);
		start_Hash.put("tDBRow_14", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_14";

	
		int tos_count_tDBRow_14 = 0;
		
    	class BytesLimit65535_tDBRow_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_14().limitLog4jByte();

	java.sql.Connection conn_tDBRow_14 = null;
	String query_tDBRow_14 = "";
	boolean whetherReject_tDBRow_14 = false;
			String driverClass_tDBRow_14 = "org.gjt.mm.mysql.Driver";
		    java.lang.Class.forName(driverClass_tDBRow_14);
		
				String url_tDBRow_14 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "entrepotrattrapage" + "?" + "noDatetimeStringSync=true";
					String dbUser_tDBRow_14 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_14 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");
        		   	
        	        String dbPwd_tDBRow_14 = decryptedPassword_tDBRow_14;
	        
					
			conn_tDBRow_14 = java.sql.DriverManager.getConnection(url_tDBRow_14,dbUser_tDBRow_14,dbPwd_tDBRow_14);
		
					if(conn_tDBRow_14.getAutoCommit()) {
						
				conn_tDBRow_14.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_14 = 10000;
					int commitCounter_tDBRow_14 = 0;
				
		java.sql.Statement stmt_tDBRow_14 = conn_tDBRow_14.createStatement();
	

 



/**
 * [tDBRow_14 begin ] stop
 */
	
	/**
	 * [tDBRow_14 main ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

query_tDBRow_14 = "DELETE\nFROM `d_provenance`";
whetherReject_tDBRow_14 = false;
globalMap.put("tDBRow_14_QUERY",query_tDBRow_14);
try {
		stmt_tDBRow_14.execute(query_tDBRow_14);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_14 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_14) {
		
	}
	
		commitCounter_tDBRow_14++;
		if(commitEvery_tDBRow_14 <= commitCounter_tDBRow_14) {
			
			conn_tDBRow_14.commit();
			
			commitCounter_tDBRow_14=0;
		}
		

 


	tos_count_tDBRow_14++;

/**
 * [tDBRow_14 main ] stop
 */
	
	/**
	 * [tDBRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

 



/**
 * [tDBRow_14 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

 



/**
 * [tDBRow_14 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_14 end ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

	
	stmt_tDBRow_14.close();	
		if(commitEvery_tDBRow_14>commitCounter_tDBRow_14){

			
			conn_tDBRow_14.commit();
			
	
			commitCounter_tDBRow_14=0;
	
		}
			conn_tDBRow_14.close();
			

 

ok_Hash.put("tDBRow_14", true);
end_Hash.put("tDBRow_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBRow_16Process(globalMap);



/**
 * [tDBRow_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_14 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

 



/**
 * [tDBRow_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_14_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_6", false);
		start_Hash.put("tDBRow_6", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_6";

	
		int tos_count_tDBRow_6 = 0;
		
    	class BytesLimit65535_tDBRow_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_6().limitLog4jByte();

	java.sql.Connection conn_tDBRow_6 = null;
	String query_tDBRow_6 = "";
	boolean whetherReject_tDBRow_6 = false;
			String driverClass_tDBRow_6 = "org.gjt.mm.mysql.Driver";
		    java.lang.Class.forName(driverClass_tDBRow_6);
		
				String url_tDBRow_6 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "entrepotrattrapage" + "?" + "noDatetimeStringSync=true";
					String dbUser_tDBRow_6 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_6 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");
        		   	
        	        String dbPwd_tDBRow_6 = decryptedPassword_tDBRow_6;
	        
					
			conn_tDBRow_6 = java.sql.DriverManager.getConnection(url_tDBRow_6,dbUser_tDBRow_6,dbPwd_tDBRow_6);
		
					if(conn_tDBRow_6.getAutoCommit()) {
						
				conn_tDBRow_6.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_6 = 10000;
					int commitCounter_tDBRow_6 = 0;
				
		java.sql.Statement stmt_tDBRow_6 = conn_tDBRow_6.createStatement();
	

 



/**
 * [tDBRow_6 begin ] stop
 */
	
	/**
	 * [tDBRow_6 main ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

query_tDBRow_6 = "DELETE\nFROM `d_csp`";
whetherReject_tDBRow_6 = false;
globalMap.put("tDBRow_6_QUERY",query_tDBRow_6);
try {
		stmt_tDBRow_6.execute(query_tDBRow_6);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_6 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_6) {
		
	}
	
		commitCounter_tDBRow_6++;
		if(commitEvery_tDBRow_6 <= commitCounter_tDBRow_6) {
			
			conn_tDBRow_6.commit();
			
			commitCounter_tDBRow_6=0;
		}
		

 


	tos_count_tDBRow_6++;

/**
 * [tDBRow_6 main ] stop
 */
	
	/**
	 * [tDBRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

 



/**
 * [tDBRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

 



/**
 * [tDBRow_6 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_6 end ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

	
	stmt_tDBRow_6.close();	
		if(commitEvery_tDBRow_6>commitCounter_tDBRow_6){

			
			conn_tDBRow_6.commit();
			
	
			commitCounter_tDBRow_6=0;
	
		}
			conn_tDBRow_6.close();
			

 

ok_Hash.put("tDBRow_6", true);
end_Hash.put("tDBRow_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBRow_16Process(globalMap);



/**
 * [tDBRow_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_6 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

 



/**
 * [tDBRow_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_6_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final CleanEDD CleanEDDClass = new CleanEDD();

        int exitCode = CleanEDDClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CleanEDD.class.getClassLoader().getResourceAsStream("edd_id/cleanedd_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CleanEDD.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBRow_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_2) {
globalMap.put("tDBRow_2_SUBPROCESS_STATE", -1);

e_tDBRow_2.printStackTrace();

}
try {
errorCode = null;tDBRow_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_4) {
globalMap.put("tDBRow_4_SUBPROCESS_STATE", -1);

e_tDBRow_4.printStackTrace();

}
try {
errorCode = null;tDBRow_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_8) {
globalMap.put("tDBRow_8_SUBPROCESS_STATE", -1);

e_tDBRow_8.printStackTrace();

}
try {
errorCode = null;tDBRow_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_10) {
globalMap.put("tDBRow_10_SUBPROCESS_STATE", -1);

e_tDBRow_10.printStackTrace();

}
try {
errorCode = null;tDBRow_12Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_12) {
globalMap.put("tDBRow_12_SUBPROCESS_STATE", -1);

e_tDBRow_12.printStackTrace();

}
try {
errorCode = null;tDBRow_14Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_14) {
globalMap.put("tDBRow_14_SUBPROCESS_STATE", -1);

e_tDBRow_14.printStackTrace();

}
try {
errorCode = null;tDBRow_6Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_6) {
globalMap.put("tDBRow_6_SUBPROCESS_STATE", -1);

e_tDBRow_6.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CleanEDD");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     63796 characters generated by Talend Open Studio for MDM 
 *     on the 24 juin 2019 15:16:44 CEST
 ************************************************************************************************/