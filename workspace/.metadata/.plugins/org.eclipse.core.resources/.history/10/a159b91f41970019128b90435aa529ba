// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for MDM
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package edd_id.fusion_apogee_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.MDM;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Fusion_Apogee Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Fusion_Apogee implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Fusion_Apogee";
	private final String projectName = "EDD_ID";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Fusion_Apogee.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Fusion_Apogee.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Fusion_Apogee = new byte[0];
    static byte[] commonByteArray_EDD_ID_Fusion_Apogee = new byte[0];

	
			    public Integer code_etu;

				public Integer getCode_etu () {
					return this.code_etu;
				}
				
			    public String annee;

				public String getAnnee () {
					return this.annee;
				}
				
			    public String nom_patro;

				public String getNom_patro () {
					return this.nom_patro;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String date_naiss;

				public String getDate_naiss () {
					return this.date_naiss;
				}
				
			    public String sexe;

				public String getSexe () {
					return this.sexe;
				}
				
			    public String nationalite;

				public String getNationalite () {
					return this.nationalite;
				}
				
			    public String bac;

				public String getBac () {
					return this.bac;
				}
				
			    public String bur_distr;

				public String getBur_distr () {
					return this.bur_distr;
				}
				
			    public String cod_pays;

				public String getCod_pays () {
					return this.cod_pays;
				}
				
			    public String etape;

				public String getEtape () {
					return this.etape;
				}
				
			    public Integer csp_par;

				public Integer getCsp_par () {
					return this.csp_par;
				}
				
			    public String cod_dep;

				public String getCod_dep () {
					return this.cod_dep;
				}
				
			    public String cod_post;

				public String getCod_post () {
					return this.cod_post;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Fusion_Apogee.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Fusion_Apogee.length == 0) {
   					commonByteArray_EDD_ID_Fusion_Apogee = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Fusion_Apogee = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Fusion_Apogee, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Fusion_Apogee, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Fusion_Apogee) {

        	try {

        		int length = 0;
		
						this.code_etu = readInteger(dis);
					
					this.annee = readString(dis);
					
					this.nom_patro = readString(dis);
					
					this.prenom = readString(dis);
					
					this.date_naiss = readString(dis);
					
					this.sexe = readString(dis);
					
					this.nationalite = readString(dis);
					
					this.bac = readString(dis);
					
					this.bur_distr = readString(dis);
					
					this.cod_pays = readString(dis);
					
					this.etape = readString(dis);
					
						this.csp_par = readInteger(dis);
					
					this.cod_dep = readString(dis);
					
					this.cod_post = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.code_etu,dos);
					
					// String
				
						writeString(this.annee,dos);
					
					// String
				
						writeString(this.nom_patro,dos);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.date_naiss,dos);
					
					// String
				
						writeString(this.sexe,dos);
					
					// String
				
						writeString(this.nationalite,dos);
					
					// String
				
						writeString(this.bac,dos);
					
					// String
				
						writeString(this.bur_distr,dos);
					
					// String
				
						writeString(this.cod_pays,dos);
					
					// String
				
						writeString(this.etape,dos);
					
					// Integer
				
						writeInteger(this.csp_par,dos);
					
					// String
				
						writeString(this.cod_dep,dos);
					
					// String
				
						writeString(this.cod_post,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("code_etu="+String.valueOf(code_etu));
		sb.append(",annee="+annee);
		sb.append(",nom_patro="+nom_patro);
		sb.append(",prenom="+prenom);
		sb.append(",date_naiss="+date_naiss);
		sb.append(",sexe="+sexe);
		sb.append(",nationalite="+nationalite);
		sb.append(",bac="+bac);
		sb.append(",bur_distr="+bur_distr);
		sb.append(",cod_pays="+cod_pays);
		sb.append(",etape="+etape);
		sb.append(",csp_par="+String.valueOf(csp_par));
		sb.append(",cod_dep="+cod_dep);
		sb.append(",cod_post="+cod_post);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Fusion_Apogee = new byte[0];
    static byte[] commonByteArray_EDD_ID_Fusion_Apogee = new byte[0];

	
			    public Integer code_etu;

				public Integer getCode_etu () {
					return this.code_etu;
				}
				
			    public String annee;

				public String getAnnee () {
					return this.annee;
				}
				
			    public String nom_patro;

				public String getNom_patro () {
					return this.nom_patro;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String date_naiss;

				public String getDate_naiss () {
					return this.date_naiss;
				}
				
			    public String sexe;

				public String getSexe () {
					return this.sexe;
				}
				
			    public String nationalite;

				public String getNationalite () {
					return this.nationalite;
				}
				
			    public String bac;

				public String getBac () {
					return this.bac;
				}
				
			    public String cod_post_pays;

				public String getCod_post_pays () {
					return this.cod_post_pays;
				}
				
			    public String bur_distr;

				public String getBur_distr () {
					return this.bur_distr;
				}
				
			    public String etape;

				public String getEtape () {
					return this.etape;
				}
				
			    public Integer csp_par;

				public Integer getCsp_par () {
					return this.csp_par;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Fusion_Apogee.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Fusion_Apogee.length == 0) {
   					commonByteArray_EDD_ID_Fusion_Apogee = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Fusion_Apogee = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Fusion_Apogee, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Fusion_Apogee, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Fusion_Apogee) {

        	try {

        		int length = 0;
		
						this.code_etu = readInteger(dis);
					
					this.annee = readString(dis);
					
					this.nom_patro = readString(dis);
					
					this.prenom = readString(dis);
					
					this.date_naiss = readString(dis);
					
					this.sexe = readString(dis);
					
					this.nationalite = readString(dis);
					
					this.bac = readString(dis);
					
					this.cod_post_pays = readString(dis);
					
					this.bur_distr = readString(dis);
					
					this.etape = readString(dis);
					
						this.csp_par = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.code_etu,dos);
					
					// String
				
						writeString(this.annee,dos);
					
					// String
				
						writeString(this.nom_patro,dos);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.date_naiss,dos);
					
					// String
				
						writeString(this.sexe,dos);
					
					// String
				
						writeString(this.nationalite,dos);
					
					// String
				
						writeString(this.bac,dos);
					
					// String
				
						writeString(this.cod_post_pays,dos);
					
					// String
				
						writeString(this.bur_distr,dos);
					
					// String
				
						writeString(this.etape,dos);
					
					// Integer
				
						writeInteger(this.csp_par,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("code_etu="+String.valueOf(code_etu));
		sb.append(",annee="+annee);
		sb.append(",nom_patro="+nom_patro);
		sb.append(",prenom="+prenom);
		sb.append(",date_naiss="+date_naiss);
		sb.append(",sexe="+sexe);
		sb.append(",nationalite="+nationalite);
		sb.append(",bac="+bac);
		sb.append(",cod_post_pays="+cod_post_pays);
		sb.append(",bur_distr="+bur_distr);
		sb.append(",etape="+etape);
		sb.append(",csp_par="+String.valueOf(csp_par));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_EDD_ID_Fusion_Apogee = new byte[0];
    static byte[] commonByteArray_EDD_ID_Fusion_Apogee = new byte[0];

	
			    public Integer code_etu;

				public Integer getCode_etu () {
					return this.code_etu;
				}
				
			    public String annee;

				public String getAnnee () {
					return this.annee;
				}
				
			    public String nom_patro;

				public String getNom_patro () {
					return this.nom_patro;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String date_naiss;

				public String getDate_naiss () {
					return this.date_naiss;
				}
				
			    public String sexe;

				public String getSexe () {
					return this.sexe;
				}
				
			    public String nationalite;

				public String getNationalite () {
					return this.nationalite;
				}
				
			    public String bac;

				public String getBac () {
					return this.bac;
				}
				
			    public String cod_post_pays;

				public String getCod_post_pays () {
					return this.cod_post_pays;
				}
				
			    public String bur_distr;

				public String getBur_distr () {
					return this.bur_distr;
				}
				
			    public String etape;

				public String getEtape () {
					return this.etape;
				}
				
			    public Integer csp_par;

				public Integer getCsp_par () {
					return this.csp_par;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_EDD_ID_Fusion_Apogee.length) {
				if(length < 1024 && commonByteArray_EDD_ID_Fusion_Apogee.length == 0) {
   					commonByteArray_EDD_ID_Fusion_Apogee = new byte[1024];
				} else {
   					commonByteArray_EDD_ID_Fusion_Apogee = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_EDD_ID_Fusion_Apogee, 0, length);
			strReturn = new String(commonByteArray_EDD_ID_Fusion_Apogee, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_EDD_ID_Fusion_Apogee) {

        	try {

        		int length = 0;
		
						this.code_etu = readInteger(dis);
					
					this.annee = readString(dis);
					
					this.nom_patro = readString(dis);
					
					this.prenom = readString(dis);
					
					this.date_naiss = readString(dis);
					
					this.sexe = readString(dis);
					
					this.nationalite = readString(dis);
					
					this.bac = readString(dis);
					
					this.cod_post_pays = readString(dis);
					
					this.bur_distr = readString(dis);
					
					this.etape = readString(dis);
					
						this.csp_par = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.code_etu,dos);
					
					// String
				
						writeString(this.annee,dos);
					
					// String
				
						writeString(this.nom_patro,dos);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.date_naiss,dos);
					
					// String
				
						writeString(this.sexe,dos);
					
					// String
				
						writeString(this.nationalite,dos);
					
					// String
				
						writeString(this.bac,dos);
					
					// String
				
						writeString(this.cod_post_pays,dos);
					
					// String
				
						writeString(this.bur_distr,dos);
					
					// String
				
						writeString(this.etape,dos);
					
					// Integer
				
						writeInteger(this.csp_par,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("code_etu="+String.valueOf(code_etu));
		sb.append(",annee="+annee);
		sb.append(",nom_patro="+nom_patro);
		sb.append(",prenom="+prenom);
		sb.append(",date_naiss="+date_naiss);
		sb.append(",sexe="+sexe);
		sb.append(",nationalite="+nationalite);
		sb.append(",bac="+bac);
		sb.append(",cod_post_pays="+cod_post_pays);
		sb.append(",bur_distr="+bur_distr);
		sb.append(",etape="+etape);
		sb.append(",csp_par="+String.valueOf(csp_par));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();

			row5Struct row5 = new row5Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tBufferOutput_1 = 0;
		
    	class BytesLimit65535_tBufferOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tBufferOutput_1().limitLog4jByte();

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String cod_pays;
	String cod_post;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUnite_1 = 0;
		
    	class BytesLimit65535_tUnite_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUnite_1().limitLog4jByte();

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputExcel_5 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
    	class BytesLimit65535_tFileList_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_1().limitLog4jByte();
	
 
     
    
  String directory_tFileList_1 = "C:/ID/dataEntrepot";
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("Apogee*.*");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputExcel_5++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputExcel_5);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputExcel_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_5", false);
		start_Hash.put("tFileInputExcel_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_5";

	
		int tos_count_tFileInputExcel_5 = 0;
		
    	class BytesLimit65535_tFileInputExcel_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_5().limitLog4jByte();


			class RegexUtil_tFileInputExcel_5 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_5 regexUtil_tFileInputExcel_5 = new RegexUtil_tFileInputExcel_5();

		Object source_tFileInputExcel_5 = ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_5 = null;

		if(source_tFileInputExcel_5 instanceof String){
			workbook_tFileInputExcel_5 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_5);
		} else if(source_tFileInputExcel_5 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_5 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_5);
		} else{
			workbook_tFileInputExcel_5 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_5 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_5 : workbook_tFileInputExcel_5){
   			sheetList_tFileInputExcel_5.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_5);
    	}
    	if(sheetList_tFileInputExcel_5.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_5 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_5 : sheetList_tFileInputExcel_5) {
			if(sheet_FilterNull_tFileInputExcel_5!=null && sheetList_FilterNull_tFileInputExcel_5.iterator()!=null && sheet_FilterNull_tFileInputExcel_5.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_5.add(sheet_FilterNull_tFileInputExcel_5);
			}
		}
		sheetList_tFileInputExcel_5 = sheetList_FilterNull_tFileInputExcel_5;
	if(sheetList_tFileInputExcel_5.size()>0){
		int nb_line_tFileInputExcel_5 = 0;

        int begin_line_tFileInputExcel_5 = 1;

        int footer_input_tFileInputExcel_5 = 0;

        int end_line_tFileInputExcel_5=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_5:sheetList_tFileInputExcel_5){
			end_line_tFileInputExcel_5+=(sheet_tFileInputExcel_5.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_5 -= footer_input_tFileInputExcel_5;
        int limit_tFileInputExcel_5 = -1;
        int start_column_tFileInputExcel_5 = 1-1;
        int end_column_tFileInputExcel_5 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_5 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_5 = sheetList_tFileInputExcel_5.get(0);
        int rowCount_tFileInputExcel_5 = 0;
        int sheetIndex_tFileInputExcel_5 = 0;
        int currentRows_tFileInputExcel_5 = (sheetList_tFileInputExcel_5.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_5 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_5 = df_tFileInputExcel_5.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_5 = begin_line_tFileInputExcel_5; i_tFileInputExcel_5 < end_line_tFileInputExcel_5; i_tFileInputExcel_5++){

        	int emptyColumnCount_tFileInputExcel_5 = 0;

        	if (limit_tFileInputExcel_5 != -1 && nb_line_tFileInputExcel_5 >= limit_tFileInputExcel_5) {
        		break;
        	}

            while (i_tFileInputExcel_5 >= rowCount_tFileInputExcel_5 + currentRows_tFileInputExcel_5) {
                rowCount_tFileInputExcel_5 += currentRows_tFileInputExcel_5;
                sheet_tFileInputExcel_5 = sheetList_tFileInputExcel_5.get(++sheetIndex_tFileInputExcel_5);
                currentRows_tFileInputExcel_5 = (sheet_tFileInputExcel_5.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_5_CURRENT_SHEET",sheet_tFileInputExcel_5.getSheetName());
            if (rowCount_tFileInputExcel_5 <= i_tFileInputExcel_5) {
                row_tFileInputExcel_5 = sheet_tFileInputExcel_5.getRow(i_tFileInputExcel_5 - rowCount_tFileInputExcel_5);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_5 = 12;
				
				int columnIndex_tFileInputExcel_5 = 0;
			
			String[] temp_row_tFileInputExcel_5 = new String[tempRowLength_tFileInputExcel_5];
			int excel_end_column_tFileInputExcel_5;
			if(row_tFileInputExcel_5==null){
				excel_end_column_tFileInputExcel_5=0;
			}else{
				excel_end_column_tFileInputExcel_5=row_tFileInputExcel_5.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_5;
			if(end_column_tFileInputExcel_5 == -1){
				actual_end_column_tFileInputExcel_5 = excel_end_column_tFileInputExcel_5;
			}
			else{
				actual_end_column_tFileInputExcel_5 = end_column_tFileInputExcel_5 >	excel_end_column_tFileInputExcel_5 ? excel_end_column_tFileInputExcel_5 : end_column_tFileInputExcel_5;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_5 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_5;i++){
				if(i + start_column_tFileInputExcel_5 < actual_end_column_tFileInputExcel_5){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_5 = row_tFileInputExcel_5.getCell(i + start_column_tFileInputExcel_5);
					if(cell_tFileInputExcel_5!=null){
					switch (cell_tFileInputExcel_5.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_5)) {
									temp_row_tFileInputExcel_5[i] =cell_tFileInputExcel_5.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_5[i] = df_tFileInputExcel_5.format(cell_tFileInputExcel_5.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_5[i] =String.valueOf(cell_tFileInputExcel_5.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_5.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_5)) {
											temp_row_tFileInputExcel_5[i] =cell_tFileInputExcel_5.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_5 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_5.getNumericCellValue());
										temp_row_tFileInputExcel_5[i] = ne_tFileInputExcel_5.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_5[i] =String.valueOf(cell_tFileInputExcel_5.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_5[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_5[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_5[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_5[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_5 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_5 = -1;
			String curColName_tFileInputExcel_5 = "";
			try{
							columnIndex_tFileInputExcel_5 = 0;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "code_etu";

				row1.code_etu = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5], null, '.'==decimalChar_tFileInputExcel_5 ? null : decimalChar_tFileInputExcel_5));
			}else{
				row1.code_etu = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 1;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "annee";

				row1.annee = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.annee = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 2;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "nom_patro";

				row1.nom_patro = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.nom_patro = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 3;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "prenom";

				row1.prenom = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.prenom = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 4;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "date_naiss";

				row1.date_naiss = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.date_naiss = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 5;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "sexe";

				row1.sexe = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.sexe = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 6;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "nationalite";

				row1.nationalite = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.nationalite = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 7;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "bac";

				row1.bac = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.bac = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 8;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "cod_post_pays";

				row1.cod_post_pays = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.cod_post_pays = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 9;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "bur_distr";

				row1.bur_distr = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.bur_distr = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 10;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "etape";

				row1.etape = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
			}else{
				row1.etape = null;
				emptyColumnCount_tFileInputExcel_5++;
			}
							columnIndex_tFileInputExcel_5 = 11;
						
			if( temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
				curColNum_tFileInputExcel_5=columnIndex_tFileInputExcel_5 + start_column_tFileInputExcel_5 + 1;
				curColName_tFileInputExcel_5 = "csp_par";

				row1.csp_par = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5], null, '.'==decimalChar_tFileInputExcel_5 ? null : decimalChar_tFileInputExcel_5));
			}else{
				row1.csp_par = null;
				emptyColumnCount_tFileInputExcel_5++;
			}

				nb_line_tFileInputExcel_5++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_5 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_5 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_5";

	

 


	tos_count_tFileInputExcel_5++;

/**
 * [tFileInputExcel_5 main ] stop
 */
	
	/**
	 * [tFileInputExcel_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_5";

	

 



/**
 * [tFileInputExcel_5 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
//////////
 

// for output
			row5 = new row5Struct();
								
			row5.code_etu = row1.code_etu;								
			row5.annee = row1.annee;								
			row5.nom_patro = row1.nom_patro;								
			row5.prenom = row1.prenom;								
			row5.date_naiss = row1.date_naiss;								
			row5.sexe = row1.sexe;								
			row5.nationalite = row1.nationalite;								
			row5.bac = row1.bac;								
			row5.cod_post_pays = row1.cod_post_pays;								
			row5.bur_distr = row1.bur_distr;								
			row5.etape = row1.etape;								
			row5.csp_par = row1.csp_par;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.cod_pays = row5.cod_post_pays.length() == 3 ? row5.cod_post_pays : "100" ;
Var.cod_post = row5.cod_post_pays.length() > 3 ? (row5.cod_post_pays.length() == 4 ? "0"+row5.cod_post_pays : row5.cod_post_pays) : "" ;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.code_etu = row5.code_etu ;
out1_tmp.annee = StringHandling.LEFT(StringHandling.RIGHT((String)globalMap.get("tFileList_1_CURRENT_FILE"),9),4) ;
out1_tmp.nom_patro = StringHandling.BTRIM(row5.nom_patro) ;
out1_tmp.prenom = StringHandling.BTRIM(row5.prenom) ;
out1_tmp.date_naiss = row5.date_naiss ;
out1_tmp.sexe = row5.sexe ;
out1_tmp.nationalite = row5.nationalite ;
out1_tmp.bac = row5.bac ;
out1_tmp.bur_distr = row5.bur_distr ;
out1_tmp.cod_pays = Var.cod_pays ;
out1_tmp.etape = row5.etape ;
out1_tmp.csp_par = row5.csp_par ;
out1_tmp.cod_dep = StringHandling.LEFT(Var.cod_post,2).equals("97") ? StringHandling.LEFT(Var.cod_post,3) : StringHandling.LEFT(Var.cod_post,2) ;
out1_tmp.cod_post = Var.cod_post ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		



String[] row_tBufferOutput_1=new String[]{"","","","","","","","","","","","","","",};		
	    if(out1.code_etu != null){
	        
	            row_tBufferOutput_1[0] = String.valueOf(out1.code_etu);
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(out1.annee != null){
	        
	            row_tBufferOutput_1[1] = out1.annee;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	    if(out1.nom_patro != null){
	        
	            row_tBufferOutput_1[2] = out1.nom_patro;
	                        			    
	    }else{
	    	row_tBufferOutput_1[2] = null;
	    }
	    if(out1.prenom != null){
	        
	            row_tBufferOutput_1[3] = out1.prenom;
	                        			    
	    }else{
	    	row_tBufferOutput_1[3] = null;
	    }
	    if(out1.date_naiss != null){
	        
	            row_tBufferOutput_1[4] = out1.date_naiss;
	                        			    
	    }else{
	    	row_tBufferOutput_1[4] = null;
	    }
	    if(out1.sexe != null){
	        
	            row_tBufferOutput_1[5] = out1.sexe;
	                        			    
	    }else{
	    	row_tBufferOutput_1[5] = null;
	    }
	    if(out1.nationalite != null){
	        
	            row_tBufferOutput_1[6] = out1.nationalite;
	                        			    
	    }else{
	    	row_tBufferOutput_1[6] = null;
	    }
	    if(out1.bac != null){
	        
	            row_tBufferOutput_1[7] = out1.bac;
	                        			    
	    }else{
	    	row_tBufferOutput_1[7] = null;
	    }
	    if(out1.bur_distr != null){
	        
	            row_tBufferOutput_1[8] = out1.bur_distr;
	                        			    
	    }else{
	    	row_tBufferOutput_1[8] = null;
	    }
	    if(out1.cod_pays != null){
	        
	            row_tBufferOutput_1[9] = out1.cod_pays;
	                        			    
	    }else{
	    	row_tBufferOutput_1[9] = null;
	    }
	    if(out1.etape != null){
	        
	            row_tBufferOutput_1[10] = out1.etape;
	                        			    
	    }else{
	    	row_tBufferOutput_1[10] = null;
	    }
	    if(out1.csp_par != null){
	        
	            row_tBufferOutput_1[11] = String.valueOf(out1.csp_par);
	                        			    
	    }else{
	    	row_tBufferOutput_1[11] = null;
	    }
	    if(out1.cod_dep != null){
	        
	            row_tBufferOutput_1[12] = out1.cod_dep;
	                        			    
	    }else{
	    	row_tBufferOutput_1[12] = null;
	    }
	    if(out1.cod_post != null){
	        
	            row_tBufferOutput_1[13] = out1.cod_post;
	                        			    
	    }else{
	    	row_tBufferOutput_1[13] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_5";

	

 



/**
 * [tFileInputExcel_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_5";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_5_NB_LINE",nb_line_tFileInputExcel_5);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_5 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_5.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_5", true);
end_Hash.put("tFileInputExcel_5", System.currentTimeMillis());




/**
 * [tFileInputExcel_5 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputExcel_5);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputExcel_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_5";

	

 



/**
 * [tFileInputExcel_5 finally ] stop
 */



	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Fusion_Apogee Fusion_ApogeeClass = new Fusion_Apogee();

        int exitCode = Fusion_ApogeeClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Fusion_Apogee.class.getClassLoader().getResourceAsStream("edd_id/fusion_apogee_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Fusion_Apogee.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileList_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileList_1) {
globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

e_tFileList_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Fusion_Apogee");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     79298 characters generated by Talend Open Studio for MDM 
 *     on the 24 juin 2019 15:16:51 CEST
 ************************************************************************************************/