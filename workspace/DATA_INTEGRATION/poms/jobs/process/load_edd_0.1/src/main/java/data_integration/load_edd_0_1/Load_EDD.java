// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for MDM
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package data_integration.load_edd_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.MDM;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Load_EDD Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Load_EDD implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Load_EDD";
	private final String projectName = "DATA_INTEGRATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Load_EDD.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Load_EDD.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String provenance;

		public String getProvenance() {
			return this.provenance;
		}

		public String cat_provenance;

		public String getCat_provenance() {
			return this.cat_provenance;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.provenance == null) ? 0 : this.provenance
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.provenance == null) {
				if (other.provenance != null)
					return false;

			} else if (!this.provenance.equals(other.provenance))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.provenance = this.provenance;
			other.cat_provenance = this.cat_provenance;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.provenance = this.provenance;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.provenance = readString(dis);

					this.cat_provenance = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.provenance, dos);

				// String

				writeString(this.cat_provenance, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("provenance=" + provenance);
			sb.append(",cat_provenance=" + cat_provenance);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.provenance,
					other.provenance);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nationalite;

		public String getNationalite() {
			return this.nationalite;
		}

		public String cat_nationalite;

		public String getCat_nationalite() {
			return this.cat_nationalite;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nationalite == null) ? 0 : this.nationalite
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.nationalite == null) {
				if (other.nationalite != null)
					return false;

			} else if (!this.nationalite.equals(other.nationalite))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.nationalite = this.nationalite;
			other.cat_nationalite = this.cat_nationalite;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.nationalite = this.nationalite;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.nationalite = readString(dis);

					this.cat_nationalite = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nationalite, dos);

				// String

				writeString(this.cat_nationalite, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nationalite=" + nationalite);
			sb.append(",cat_nationalite=" + cat_nationalite);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nationalite,
					other.nationalite);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String dept;

		public String getDept() {
			return this.dept;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ville == null) ? 0 : this.ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.ville == null) {
				if (other.ville != null)
					return false;

			} else if (!this.ville.equals(other.ville))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.ville = this.ville;
			other.dept = this.dept;
			other.region = this.region;
			other.pays = this.pays;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.ville = this.ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.ville = readString(dis);

					this.dept = readString(dis);

					this.region = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.dept, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ville=" + ville);
			sb.append(",dept=" + dept);
			sb.append(",region=" + region);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ville, other.ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String bac;

		public String getBac() {
			return this.bac;
		}

		public String cat_bac;

		public String getCat_bac() {
			return this.cat_bac;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.bac == null) ? 0 : this.bac.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.bac == null) {
				if (other.bac != null)
					return false;

			} else if (!this.bac.equals(other.bac))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.bac = this.bac;
			other.cat_bac = this.cat_bac;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.bac = this.bac;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.bac = readString(dis);

					this.cat_bac = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.bac, dos);

				// String

				writeString(this.cat_bac, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bac=" + bac);
			sb.append(",cat_bac=" + cat_bac);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.bac, other.bac);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer codeEtudiant;

		public Integer getCodeEtudiant() {
			return this.codeEtudiant;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codeEtudiant == null) ? 0 : this.codeEtudiant
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.codeEtudiant == null) {
				if (other.codeEtudiant != null)
					return false;

			} else if (!this.codeEtudiant.equals(other.codeEtudiant))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.codeEtudiant = this.codeEtudiant;
			other.nom = this.nom;
			other.prenom = this.prenom;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.codeEtudiant = this.codeEtudiant;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.codeEtudiant = readInteger(dis);

					this.nom = readString(dis);

					this.prenom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.codeEtudiant, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.prenom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codeEtudiant=" + String.valueOf(codeEtudiant));
			sb.append(",nom=" + nom);
			sb.append(",prenom=" + prenom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codeEtudiant,
					other.codeEtudiant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int age;

		public int getAge() {
			return this.age;
		}

		public String cat_age;

		public String getCat_age() {
			return this.cat_age;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.age;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.age != other.age)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.age = this.age;
			other.cat_age = this.cat_age;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.age = this.age;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.age = dis.readInt();

					this.cat_age = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.age);

				// String

				writeString(this.cat_age, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("age=" + String.valueOf(age));
			sb.append(",cat_age=" + cat_age);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.age, other.age);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class d_ageStruct implements
			routines.system.IPersistableRow<d_ageStruct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int age;

		public int getAge() {
			return this.age;
		}

		public String cat_age;

		public String getCat_age() {
			return this.cat_age;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.age;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final d_ageStruct other = (d_ageStruct) obj;

			if (this.age != other.age)
				return false;

			return true;
		}

		public void copyDataTo(d_ageStruct other) {

			other.age = this.age;
			other.cat_age = this.cat_age;

		}

		public void copyKeysDataTo(d_ageStruct other) {

			other.age = this.age;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.age = dis.readInt();

					this.cat_age = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.age);

				// String

				writeString(this.cat_age, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("age=" + String.valueOf(age));
			sb.append(",cat_age=" + cat_age);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(d_ageStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.age, other.age);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class d_etuStruct implements
			routines.system.IPersistableRow<d_etuStruct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer codeEtudiant;

		public Integer getCodeEtudiant() {
			return this.codeEtudiant;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codeEtudiant == null) ? 0 : this.codeEtudiant
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final d_etuStruct other = (d_etuStruct) obj;

			if (this.codeEtudiant == null) {
				if (other.codeEtudiant != null)
					return false;

			} else if (!this.codeEtudiant.equals(other.codeEtudiant))

				return false;

			return true;
		}

		public void copyDataTo(d_etuStruct other) {

			other.codeEtudiant = this.codeEtudiant;
			other.nom = this.nom;
			other.prenom = this.prenom;

		}

		public void copyKeysDataTo(d_etuStruct other) {

			other.codeEtudiant = this.codeEtudiant;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.codeEtudiant = readInteger(dis);

					this.nom = readString(dis);

					this.prenom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.codeEtudiant, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.prenom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codeEtudiant=" + String.valueOf(codeEtudiant));
			sb.append(",nom=" + nom);
			sb.append(",prenom=" + prenom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(d_etuStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codeEtudiant,
					other.codeEtudiant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class d_bacStruct implements
			routines.system.IPersistableRow<d_bacStruct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String bac;

		public String getBac() {
			return this.bac;
		}

		public String cat_bac;

		public String getCat_bac() {
			return this.cat_bac;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.bac == null) ? 0 : this.bac.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final d_bacStruct other = (d_bacStruct) obj;

			if (this.bac == null) {
				if (other.bac != null)
					return false;

			} else if (!this.bac.equals(other.bac))

				return false;

			return true;
		}

		public void copyDataTo(d_bacStruct other) {

			other.bac = this.bac;
			other.cat_bac = this.cat_bac;

		}

		public void copyKeysDataTo(d_bacStruct other) {

			other.bac = this.bac;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.bac = readString(dis);

					this.cat_bac = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.bac, dos);

				// String

				writeString(this.cat_bac, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bac=" + bac);
			sb.append(",cat_bac=" + cat_bac);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(d_bacStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.bac, other.bac);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class d_geoStruct implements
			routines.system.IPersistableRow<d_geoStruct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String dept;

		public String getDept() {
			return this.dept;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ville == null) ? 0 : this.ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final d_geoStruct other = (d_geoStruct) obj;

			if (this.ville == null) {
				if (other.ville != null)
					return false;

			} else if (!this.ville.equals(other.ville))

				return false;

			return true;
		}

		public void copyDataTo(d_geoStruct other) {

			other.ville = this.ville;
			other.dept = this.dept;
			other.region = this.region;
			other.pays = this.pays;

		}

		public void copyKeysDataTo(d_geoStruct other) {

			other.ville = this.ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.ville = readString(dis);

					this.dept = readString(dis);

					this.region = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.dept, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ville=" + ville);
			sb.append(",dept=" + dept);
			sb.append(",region=" + region);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(d_geoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ville, other.ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class d_nationaliteStruct implements
			routines.system.IPersistableRow<d_nationaliteStruct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nationalite;

		public String getNationalite() {
			return this.nationalite;
		}

		public String cat_nationalite;

		public String getCat_nationalite() {
			return this.cat_nationalite;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nationalite == null) ? 0 : this.nationalite
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final d_nationaliteStruct other = (d_nationaliteStruct) obj;

			if (this.nationalite == null) {
				if (other.nationalite != null)
					return false;

			} else if (!this.nationalite.equals(other.nationalite))

				return false;

			return true;
		}

		public void copyDataTo(d_nationaliteStruct other) {

			other.nationalite = this.nationalite;
			other.cat_nationalite = this.cat_nationalite;

		}

		public void copyKeysDataTo(d_nationaliteStruct other) {

			other.nationalite = this.nationalite;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.nationalite = readString(dis);

					this.cat_nationalite = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nationalite, dos);

				// String

				writeString(this.cat_nationalite, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nationalite=" + nationalite);
			sb.append(",cat_nationalite=" + cat_nationalite);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(d_nationaliteStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nationalite,
					other.nationalite);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class d_provenanceStruct implements
			routines.system.IPersistableRow<d_provenanceStruct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String provenance;

		public String getProvenance() {
			return this.provenance;
		}

		public String cat_provenance;

		public String getCat_provenance() {
			return this.cat_provenance;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.provenance == null) ? 0 : this.provenance
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final d_provenanceStruct other = (d_provenanceStruct) obj;

			if (this.provenance == null) {
				if (other.provenance != null)
					return false;

			} else if (!this.provenance.equals(other.provenance))

				return false;

			return true;
		}

		public void copyDataTo(d_provenanceStruct other) {

			other.provenance = this.provenance;
			other.cat_provenance = this.cat_provenance;

		}

		public void copyKeysDataTo(d_provenanceStruct other) {

			other.provenance = this.provenance;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.provenance = readString(dis);

					this.cat_provenance = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.provenance, dos);

				// String

				writeString(this.cat_provenance, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("provenance=" + provenance);
			sb.append(",cat_provenance=" + cat_provenance);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(d_provenanceStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.provenance,
					other.provenance);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];

		public Integer code_etu;

		public Integer getCode_etu() {
			return this.code_etu;
		}

		public String annee;

		public String getAnnee() {
			return this.annee;
		}

		public String nom_patro;

		public String getNom_patro() {
			return this.nom_patro;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String date_naiss;

		public String getDate_naiss() {
			return this.date_naiss;
		}

		public String sexe;

		public String getSexe() {
			return this.sexe;
		}

		public String nationalite;

		public String getNationalite() {
			return this.nationalite;
		}

		public String bac;

		public String getBac() {
			return this.bac;
		}

		public String bur_distr;

		public String getBur_distr() {
			return this.bur_distr;
		}

		public String etape;

		public String getEtape() {
			return this.etape;
		}

		public Integer csp_par;

		public Integer getCsp_par() {
			return this.csp_par;
		}

		public String promo;

		public String getPromo() {
			return this.promo;
		}

		public String niveau;

		public String getNiveau() {
			return this.niveau;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Lv2;

		public String getLv2() {
			return this.Lv2;
		}

		public String Provenance;

		public String getProvenance() {
			return this.Provenance;
		}

		public String cod_pays;

		public String getCod_pays() {
			return this.cod_pays;
		}

		public String cod_dep;

		public String getCod_dep() {
			return this.cod_dep;
		}

		public String cod_post;

		public String getCod_post() {
			return this.cod_post;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.code_etu = readInteger(dis);

					this.annee = readString(dis);

					this.nom_patro = readString(dis);

					this.prenom = readString(dis);

					this.date_naiss = readString(dis);

					this.sexe = readString(dis);

					this.nationalite = readString(dis);

					this.bac = readString(dis);

					this.bur_distr = readString(dis);

					this.etape = readString(dis);

					this.csp_par = readInteger(dis);

					this.promo = readString(dis);

					this.niveau = readString(dis);

					this.Groupe = readString(dis);

					this.Lv2 = readString(dis);

					this.Provenance = readString(dis);

					this.cod_pays = readString(dis);

					this.cod_dep = readString(dis);

					this.cod_post = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.code_etu, dos);

				// String

				writeString(this.annee, dos);

				// String

				writeString(this.nom_patro, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.date_naiss, dos);

				// String

				writeString(this.sexe, dos);

				// String

				writeString(this.nationalite, dos);

				// String

				writeString(this.bac, dos);

				// String

				writeString(this.bur_distr, dos);

				// String

				writeString(this.etape, dos);

				// Integer

				writeInteger(this.csp_par, dos);

				// String

				writeString(this.promo, dos);

				// String

				writeString(this.niveau, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Lv2, dos);

				// String

				writeString(this.Provenance, dos);

				// String

				writeString(this.cod_pays, dos);

				// String

				writeString(this.cod_dep, dos);

				// String

				writeString(this.cod_post, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_etu=" + String.valueOf(code_etu));
			sb.append(",annee=" + annee);
			sb.append(",nom_patro=" + nom_patro);
			sb.append(",prenom=" + prenom);
			sb.append(",date_naiss=" + date_naiss);
			sb.append(",sexe=" + sexe);
			sb.append(",nationalite=" + nationalite);
			sb.append(",bac=" + bac);
			sb.append(",bur_distr=" + bur_distr);
			sb.append(",etape=" + etape);
			sb.append(",csp_par=" + String.valueOf(csp_par));
			sb.append(",promo=" + promo);
			sb.append(",niveau=" + niveau);
			sb.append(",Groupe=" + Groupe);
			sb.append(",Lv2=" + Lv2);
			sb.append(",Provenance=" + Provenance);
			sb.append(",cod_pays=" + cod_pays);
			sb.append(",cod_dep=" + cod_dep);
			sb.append(",cod_post=" + cod_post);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];

		public Integer code_etu;

		public Integer getCode_etu() {
			return this.code_etu;
		}

		public String annee;

		public String getAnnee() {
			return this.annee;
		}

		public String nom_patro;

		public String getNom_patro() {
			return this.nom_patro;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String date_naiss;

		public String getDate_naiss() {
			return this.date_naiss;
		}

		public String sexe;

		public String getSexe() {
			return this.sexe;
		}

		public String nationalite;

		public String getNationalite() {
			return this.nationalite;
		}

		public String bac;

		public String getBac() {
			return this.bac;
		}

		public String bur_distr;

		public String getBur_distr() {
			return this.bur_distr;
		}

		public String etape;

		public String getEtape() {
			return this.etape;
		}

		public Integer csp_par;

		public Integer getCsp_par() {
			return this.csp_par;
		}

		public String promo;

		public String getPromo() {
			return this.promo;
		}

		public String niveau;

		public String getNiveau() {
			return this.niveau;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Lv2;

		public String getLv2() {
			return this.Lv2;
		}

		public String Provenance;

		public String getProvenance() {
			return this.Provenance;
		}

		public String cod_pays;

		public String getCod_pays() {
			return this.cod_pays;
		}

		public String cod_dep;

		public String getCod_dep() {
			return this.cod_dep;
		}

		public String cod_post;

		public String getCod_post() {
			return this.cod_post;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.code_etu = readInteger(dis);

					this.annee = readString(dis);

					this.nom_patro = readString(dis);

					this.prenom = readString(dis);

					this.date_naiss = readString(dis);

					this.sexe = readString(dis);

					this.nationalite = readString(dis);

					this.bac = readString(dis);

					this.bur_distr = readString(dis);

					this.etape = readString(dis);

					this.csp_par = readInteger(dis);

					this.promo = readString(dis);

					this.niveau = readString(dis);

					this.Groupe = readString(dis);

					this.Lv2 = readString(dis);

					this.Provenance = readString(dis);

					this.cod_pays = readString(dis);

					this.cod_dep = readString(dis);

					this.cod_post = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.code_etu, dos);

				// String

				writeString(this.annee, dos);

				// String

				writeString(this.nom_patro, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.date_naiss, dos);

				// String

				writeString(this.sexe, dos);

				// String

				writeString(this.nationalite, dos);

				// String

				writeString(this.bac, dos);

				// String

				writeString(this.bur_distr, dos);

				// String

				writeString(this.etape, dos);

				// Integer

				writeInteger(this.csp_par, dos);

				// String

				writeString(this.promo, dos);

				// String

				writeString(this.niveau, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Lv2, dos);

				// String

				writeString(this.Provenance, dos);

				// String

				writeString(this.cod_pays, dos);

				// String

				writeString(this.cod_dep, dos);

				// String

				writeString(this.cod_post, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_etu=" + String.valueOf(code_etu));
			sb.append(",annee=" + annee);
			sb.append(",nom_patro=" + nom_patro);
			sb.append(",prenom=" + prenom);
			sb.append(",date_naiss=" + date_naiss);
			sb.append(",sexe=" + sexe);
			sb.append(",nationalite=" + nationalite);
			sb.append(",bac=" + bac);
			sb.append(",bur_distr=" + bur_distr);
			sb.append(",etape=" + etape);
			sb.append(",csp_par=" + String.valueOf(csp_par));
			sb.append(",promo=" + promo);
			sb.append(",niveau=" + niveau);
			sb.append(",Groupe=" + Groupe);
			sb.append(",Lv2=" + Lv2);
			sb.append(",Provenance=" + Provenance);
			sb.append(",cod_pays=" + cod_pays);
			sb.append(",cod_dep=" + cod_dep);
			sb.append(",cod_post=" + cod_post);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				d_ageStruct d_age = new d_ageStruct();
				row2Struct row2 = new row2Struct();
				d_etuStruct d_etu = new d_etuStruct();
				row5Struct row5 = new row5Struct();
				d_bacStruct d_bac = new d_bacStruct();
				row3Struct row3 = new row3Struct();
				d_geoStruct d_geo = new d_geoStruct();
				row6Struct row6 = new row6Struct();
				d_nationaliteStruct d_nationalite = new d_nationaliteStruct();
				row7Struct row7 = new row7Struct();
				d_provenanceStruct d_provenance = new d_provenanceStruct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tDBOutput_10 begin ] start
				 */

				ok_Hash.put("tDBOutput_10", false);
				start_Hash.put("tDBOutput_10", System.currentTimeMillis());

				currentComponent = "tDBOutput_10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_10 = 0;

				class BytesLimit65535_tDBOutput_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_10().limitLog4jByte();

				int nb_line_tDBOutput_10 = 0;
				int nb_line_update_tDBOutput_10 = 0;
				int nb_line_inserted_tDBOutput_10 = 0;
				int nb_line_deleted_tDBOutput_10 = 0;
				int nb_line_rejected_tDBOutput_10 = 0;

				int deletedCount_tDBOutput_10 = 0;
				int updatedCount_tDBOutput_10 = 0;
				int insertedCount_tDBOutput_10 = 0;

				int rejectedCount_tDBOutput_10 = 0;

				String tableName_tDBOutput_10 = "d_age";
				boolean whetherReject_tDBOutput_10 = false;

				java.util.Calendar calendar_tDBOutput_10 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_10.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_10 = calendar_tDBOutput_10.getTime()
						.getTime();
				calendar_tDBOutput_10.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_10 = calendar_tDBOutput_10.getTime()
						.getTime();
				long date_tDBOutput_10;

				java.sql.Connection conn_tDBOutput_10 = null;
				String dbProperties_tDBOutput_10 = "noDatetimeStringSync=true";
				String url_tDBOutput_10 = null;
				if (dbProperties_tDBOutput_10 == null
						|| dbProperties_tDBOutput_10.trim().length() == 0) {
					url_tDBOutput_10 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_10 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_10
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_10 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_10 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ properties_tDBOutput_10;
				}
				String driverClass_tDBOutput_10 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_10 = "root";

				final String decryptedPassword_tDBOutput_10 = routines.system.PasswordEncryptUtil
						.decryptPassword("99a5c139d564b21c");

				String dbPwd_tDBOutput_10 = decryptedPassword_tDBOutput_10;
				java.lang.Class.forName(driverClass_tDBOutput_10);

				conn_tDBOutput_10 = java.sql.DriverManager.getConnection(
						url_tDBOutput_10, dbUser_tDBOutput_10,
						dbPwd_tDBOutput_10);

				resourceMap.put("conn_tDBOutput_10", conn_tDBOutput_10);
				conn_tDBOutput_10.setAutoCommit(false);
				int commitEvery_tDBOutput_10 = 10000;
				int commitCounter_tDBOutput_10 = 0;

				int count_tDBOutput_10 = 0;

				java.sql.Statement stmtClear_tDBOutput_10 = conn_tDBOutput_10
						.createStatement();
				stmtClear_tDBOutput_10.executeUpdate("DELETE FROM `"
						+ tableName_tDBOutput_10 + "`");
				stmtClear_tDBOutput_10.close();

				String insert_tDBOutput_10 = "INSERT INTO `" + "d_age"
						+ "` (`age`,`cat_age`) VALUES (?,?)";
				int batchSize_tDBOutput_10 = 100;
				int batchSizeCounter_tDBOutput_10 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10
						.prepareStatement(insert_tDBOutput_10);

				/**
				 * [tDBOutput_10 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("d_age" + iterateId, 0,
								0);

					}
				}

				int tos_count_tUniqRow_1 = 0;

				class BytesLimit65535_tUniqRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUniqRow_1().limitLog4jByte();

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int age;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.age;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.age != other.age)
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_6 = 0;

				class BytesLimit65535_tDBOutput_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_6().limitLog4jByte();

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;

				int rejectedCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "d_etu";
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_6 = calendar_tDBOutput_6.getTime()
						.getTime();
				calendar_tDBOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_6 = calendar_tDBOutput_6.getTime()
						.getTime();
				long date_tDBOutput_6;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbProperties_tDBOutput_6 = "noDatetimeStringSync=true";
				String url_tDBOutput_6 = null;
				if (dbProperties_tDBOutput_6 == null
						|| dbProperties_tDBOutput_6.trim().length() == 0) {
					url_tDBOutput_6 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_6 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_6
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_6 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ properties_tDBOutput_6;
				}
				String driverClass_tDBOutput_6 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_6 = "root";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("99a5c139d564b21c");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				java.lang.Class.forName(driverClass_tDBOutput_6);

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(
						url_tDBOutput_6, dbUser_tDBOutput_6, dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;

				java.sql.Statement stmtClear_tDBOutput_6 = conn_tDBOutput_6
						.createStatement();
				stmtClear_tDBOutput_6.executeUpdate("DELETE FROM `"
						+ tableName_tDBOutput_6 + "`");
				stmtClear_tDBOutput_6.close();

				String insert_tDBOutput_6 = "INSERT INTO `" + "d_etu"
						+ "` (`codeEtudiant`,`nom`,`prenom`) VALUES (?,?,?)";
				int batchSize_tDBOutput_6 = 100;
				int batchSizeCounter_tDBOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("d_etu" + iterateId, 0,
								0);

					}
				}

				int tos_count_tUniqRow_4 = 0;

				class BytesLimit65535_tUniqRow_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUniqRow_4().limitLog4jByte();

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer codeEtudiant;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.codeEtudiant == null) ? 0
											: this.codeEtudiant.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.codeEtudiant == null) {
							if (other.codeEtudiant != null)
								return false;

						} else if (!this.codeEtudiant
								.equals(other.codeEtudiant))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				class BytesLimit65535_tDBOutput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_2().limitLog4jByte();

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "d_bac";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime()
						.getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime()
						.getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null
						|| dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ properties_tDBOutput_2;
				}
				String driverClass_tDBOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("99a5c139d564b21c");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				java.sql.Statement stmtClear_tDBOutput_2 = conn_tDBOutput_2
						.createStatement();
				stmtClear_tDBOutput_2.executeUpdate("DELETE FROM `"
						+ tableName_tDBOutput_2 + "`");
				stmtClear_tDBOutput_2.close();

				String insert_tDBOutput_2 = "INSERT INTO `" + "d_bac"
						+ "` (`bac`,`cat_bac`) VALUES (?,?)";
				int batchSize_tDBOutput_2 = 100;
				int batchSizeCounter_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("d_bac" + iterateId, 0,
								0);

					}
				}

				int tos_count_tUniqRow_3 = 0;

				class BytesLimit65535_tUniqRow_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUniqRow_3().limitLog4jByte();

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String bac;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.bac == null) ? 0 : this.bac
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.bac == null) {
							if (other.bac != null)
								return false;

						} else if (!this.bac.equals(other.bac))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_8 = 0;

				class BytesLimit65535_tDBOutput_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_8().limitLog4jByte();

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;

				int rejectedCount_tDBOutput_8 = 0;

				String tableName_tDBOutput_8 = "d_geo";
				boolean whetherReject_tDBOutput_8 = false;

				java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_8.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_8 = calendar_tDBOutput_8.getTime()
						.getTime();
				calendar_tDBOutput_8.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_8 = calendar_tDBOutput_8.getTime()
						.getTime();
				long date_tDBOutput_8;

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbProperties_tDBOutput_8 = "noDatetimeStringSync=true";
				String url_tDBOutput_8 = null;
				if (dbProperties_tDBOutput_8 == null
						|| dbProperties_tDBOutput_8.trim().length() == 0) {
					url_tDBOutput_8 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_8 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_8
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_8 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_8 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ properties_tDBOutput_8;
				}
				String driverClass_tDBOutput_8 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_8 = "root";

				final String decryptedPassword_tDBOutput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("99a5c139d564b21c");

				String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;
				java.lang.Class.forName(driverClass_tDBOutput_8);

				conn_tDBOutput_8 = java.sql.DriverManager.getConnection(
						url_tDBOutput_8, dbUser_tDBOutput_8, dbPwd_tDBOutput_8);

				resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
				conn_tDBOutput_8.setAutoCommit(false);
				int commitEvery_tDBOutput_8 = 10000;
				int commitCounter_tDBOutput_8 = 0;

				int count_tDBOutput_8 = 0;

				java.sql.Statement stmtClear_tDBOutput_8 = conn_tDBOutput_8
						.createStatement();
				stmtClear_tDBOutput_8.executeUpdate("DELETE FROM `"
						+ tableName_tDBOutput_8 + "`");
				stmtClear_tDBOutput_8.close();

				String insert_tDBOutput_8 = "INSERT INTO `" + "d_geo"
						+ "` (`ville`,`dept`,`region`,`pays`) VALUES (?,?,?,?)";
				int batchSize_tDBOutput_8 = 100;
				int batchSizeCounter_tDBOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8
						.prepareStatement(insert_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());

				currentComponent = "tUniqRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("d_geo" + iterateId, 0,
								0);

					}
				}

				int tos_count_tUniqRow_5 = 0;

				class BytesLimit65535_tUniqRow_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUniqRow_5().limitLog4jByte();

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ville;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ville == null) ? 0 : this.ville
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.ville == null) {
							if (other.ville != null)
								return false;

						} else if (!this.ville.equals(other.ville))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tDBOutput_11 begin ] start
				 */

				ok_Hash.put("tDBOutput_11", false);
				start_Hash.put("tDBOutput_11", System.currentTimeMillis());

				currentComponent = "tDBOutput_11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_11 = 0;

				class BytesLimit65535_tDBOutput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_11().limitLog4jByte();

				int nb_line_tDBOutput_11 = 0;
				int nb_line_update_tDBOutput_11 = 0;
				int nb_line_inserted_tDBOutput_11 = 0;
				int nb_line_deleted_tDBOutput_11 = 0;
				int nb_line_rejected_tDBOutput_11 = 0;

				int deletedCount_tDBOutput_11 = 0;
				int updatedCount_tDBOutput_11 = 0;
				int insertedCount_tDBOutput_11 = 0;

				int rejectedCount_tDBOutput_11 = 0;

				String tableName_tDBOutput_11 = "d_nationalite";
				boolean whetherReject_tDBOutput_11 = false;

				java.util.Calendar calendar_tDBOutput_11 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_11.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_11 = calendar_tDBOutput_11.getTime()
						.getTime();
				calendar_tDBOutput_11.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_11 = calendar_tDBOutput_11.getTime()
						.getTime();
				long date_tDBOutput_11;

				java.sql.Connection conn_tDBOutput_11 = null;
				String dbProperties_tDBOutput_11 = "noDatetimeStringSync=true";
				String url_tDBOutput_11 = null;
				if (dbProperties_tDBOutput_11 == null
						|| dbProperties_tDBOutput_11.trim().length() == 0) {
					url_tDBOutput_11 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_11 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_11
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_11 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_11 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ properties_tDBOutput_11;
				}
				String driverClass_tDBOutput_11 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_11 = "root";

				final String decryptedPassword_tDBOutput_11 = routines.system.PasswordEncryptUtil
						.decryptPassword("99a5c139d564b21c");

				String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;
				java.lang.Class.forName(driverClass_tDBOutput_11);

				conn_tDBOutput_11 = java.sql.DriverManager.getConnection(
						url_tDBOutput_11, dbUser_tDBOutput_11,
						dbPwd_tDBOutput_11);

				resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);
				conn_tDBOutput_11.setAutoCommit(false);
				int commitEvery_tDBOutput_11 = 10000;
				int commitCounter_tDBOutput_11 = 0;

				int count_tDBOutput_11 = 0;

				java.sql.Statement stmtClear_tDBOutput_11 = conn_tDBOutput_11
						.createStatement();
				stmtClear_tDBOutput_11.executeUpdate("DELETE FROM `"
						+ tableName_tDBOutput_11 + "`");
				stmtClear_tDBOutput_11.close();

				String insert_tDBOutput_11 = "INSERT INTO `" + "d_nationalite"
						+ "` (`nationalite`,`cat_nationalite`) VALUES (?,?)";
				int batchSize_tDBOutput_11 = 100;
				int batchSizeCounter_tDBOutput_11 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11
						.prepareStatement(insert_tDBOutput_11);

				/**
				 * [tDBOutput_11 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());

				currentComponent = "tUniqRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("d_nationalite"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tUniqRow_6 = 0;

				class BytesLimit65535_tUniqRow_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUniqRow_6().limitLog4jByte();

				class KeyStruct_tUniqRow_6 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String nationalite;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.nationalite == null) ? 0
											: this.nationalite.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

						if (this.nationalite == null) {
							if (other.nationalite != null)
								return false;

						} else if (!this.nationalite.equals(other.nationalite))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;
				KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
				java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tDBOutput_13 begin ] start
				 */

				ok_Hash.put("tDBOutput_13", false);
				start_Hash.put("tDBOutput_13", System.currentTimeMillis());

				currentComponent = "tDBOutput_13";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_13 = 0;

				class BytesLimit65535_tDBOutput_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_13().limitLog4jByte();

				int nb_line_tDBOutput_13 = 0;
				int nb_line_update_tDBOutput_13 = 0;
				int nb_line_inserted_tDBOutput_13 = 0;
				int nb_line_deleted_tDBOutput_13 = 0;
				int nb_line_rejected_tDBOutput_13 = 0;

				int deletedCount_tDBOutput_13 = 0;
				int updatedCount_tDBOutput_13 = 0;
				int insertedCount_tDBOutput_13 = 0;

				int rejectedCount_tDBOutput_13 = 0;

				String tableName_tDBOutput_13 = "d_provenance";
				boolean whetherReject_tDBOutput_13 = false;

				java.util.Calendar calendar_tDBOutput_13 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_13.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_13 = calendar_tDBOutput_13.getTime()
						.getTime();
				calendar_tDBOutput_13.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_13 = calendar_tDBOutput_13.getTime()
						.getTime();
				long date_tDBOutput_13;

				java.sql.Connection conn_tDBOutput_13 = null;
				String dbProperties_tDBOutput_13 = "noDatetimeStringSync=true";
				String url_tDBOutput_13 = null;
				if (dbProperties_tDBOutput_13 == null
						|| dbProperties_tDBOutput_13.trim().length() == 0) {
					url_tDBOutput_13 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_13 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_13
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_13 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_13 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "entrepotrattrapage" + "?"
							+ properties_tDBOutput_13;
				}
				String driverClass_tDBOutput_13 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_13 = "root";

				final String decryptedPassword_tDBOutput_13 = routines.system.PasswordEncryptUtil
						.decryptPassword("99a5c139d564b21c");

				String dbPwd_tDBOutput_13 = decryptedPassword_tDBOutput_13;
				java.lang.Class.forName(driverClass_tDBOutput_13);

				conn_tDBOutput_13 = java.sql.DriverManager.getConnection(
						url_tDBOutput_13, dbUser_tDBOutput_13,
						dbPwd_tDBOutput_13);

				resourceMap.put("conn_tDBOutput_13", conn_tDBOutput_13);
				conn_tDBOutput_13.setAutoCommit(false);
				int commitEvery_tDBOutput_13 = 10000;
				int commitCounter_tDBOutput_13 = 0;

				int count_tDBOutput_13 = 0;

				java.sql.Statement stmtClear_tDBOutput_13 = conn_tDBOutput_13
						.createStatement();
				stmtClear_tDBOutput_13.executeUpdate("DELETE FROM `"
						+ tableName_tDBOutput_13 + "`");
				stmtClear_tDBOutput_13.close();

				String insert_tDBOutput_13 = "INSERT INTO `" + "d_provenance"
						+ "` (`provenance`,`cat_provenance`) VALUES (?,?)";
				int batchSize_tDBOutput_13 = 100;
				int batchSizeCounter_tDBOutput_13 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13
						.prepareStatement(insert_tDBOutput_13);

				/**
				 * [tDBOutput_13 begin ] stop
				 */

				/**
				 * [tUniqRow_8 begin ] start
				 */

				ok_Hash.put("tUniqRow_8", false);
				start_Hash.put("tUniqRow_8", System.currentTimeMillis());

				currentComponent = "tUniqRow_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("d_provenance"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tUniqRow_8 = 0;

				class BytesLimit65535_tUniqRow_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUniqRow_8().limitLog4jByte();

				class KeyStruct_tUniqRow_8 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String provenance;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.provenance == null) ? 0
											: this.provenance.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;

						if (this.provenance == null) {
							if (other.provenance != null)
								return false;

						} else if (!this.provenance.equals(other.provenance))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_8 = 0;
				int nb_duplicates_tUniqRow_8 = 0;
				KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
				java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>();

				/**
				 * [tUniqRow_8 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					String annee_naiss;
					java.util.Date annee_naiss_date;
					java.util.Date var2;
					int age;
					String cat_age;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				d_ageStruct d_age_tmp = new d_ageStruct();
				d_etuStruct d_etu_tmp = new d_etuStruct();
				d_bacStruct d_bac_tmp = new d_bacStruct();
				d_geoStruct d_geo_tmp = new d_geoStruct();
				d_nationaliteStruct d_nationalite_tmp = new d_nationaliteStruct();
				d_provenanceStruct d_provenance_tmp = new d_provenanceStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/fusionOut.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/fusionOut.csv",
								"windows-1252", ";", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();
							if (temp.length() > 0) {

								try {

									row1.code_etu = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"code_etu", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.code_etu = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.annee = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.nom_patro = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.prenom = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.date_naiss = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.sexe = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.nationalite = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.bac = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.bur_distr = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.etape = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();
							if (temp.length() > 0) {

								try {

									row1.csp_par = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"csp_par", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.csp_par = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.promo = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.niveau = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.Groupe = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.Lv2 = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.Provenance = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row1.cod_pays = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.cod_dep = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.cod_post = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row10"
							// /////////////////////////////////////////////

							boolean forceLooprow10 = false;

							row10Struct row10ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row10HashKey.COG = row1.cod_pays;

								row10HashKey.hashCodeDirty = true;

								tHash_Lookup_row10.lookup(row10HashKey);

								if (!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

									forceLooprow10 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow10 = true;
							} // G 21

							row10Struct row10 = null;

							while ((tHash_Lookup_row10 != null && tHash_Lookup_row10
									.hasNext()) || forceLooprow10) { // G_TM_M_043

								// CALL close loop of lookup 'row10'

								row10Struct fromLookup_row10 = null;
								row10 = row10Default;

								if (!forceLooprow10) { // G 46

									fromLookup_row10 = tHash_Lookup_row10
											.next();

									if (fromLookup_row10 != null) {
										row10 = fromLookup_row10;
									}

								} // G 46

								forceLooprow10 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row9"
								// /////////////////////////////////////////////

								boolean forceLooprow9 = false;

								row9Struct row9ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row9HashKey.DEP = row1.cod_dep;

									row9HashKey.hashCodeDirty = true;

									tHash_Lookup_row9.lookup(row9HashKey);

									if (!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

										forceLooprow9 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow9 = true;
								} // G 21

								row9Struct row9 = null;

								while ((tHash_Lookup_row9 != null && tHash_Lookup_row9
										.hasNext()) || forceLooprow9) { // G_TM_M_043

									// CALL close loop of lookup 'row9'

									row9Struct fromLookup_row9 = null;
									row9 = row9Default;

									if (!forceLooprow9) { // G 46

										fromLookup_row9 = tHash_Lookup_row9
												.next();

										if (fromLookup_row9 != null) {
											row9 = fromLookup_row9;
										}

									} // G 46

									forceLooprow9 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;
										Var.annee_naiss = StringHandling.RIGHT(
												row1.date_naiss, 4);
										Var.annee_naiss_date = TalendDate
												.parseDate("yyyy",
														Var.annee_naiss);
										Var.var2 = TalendDate.parseDate("yyyy",
												row1.annee);
										Var.age = (int) TalendDate.diffDate(
												Var.var2, Var.annee_naiss_date,
												"yyyy");
										Var.cat_age = Var.age < 20 ? "16-20"
												: (20 <= Var.age
														&& Var.age <= 25 ? "20-25"
														: "+25");// ###############################
										// ###############################
										// # Output tables

										d_age = null;
										d_etu = null;
										d_bac = null;
										d_geo = null;
										d_nationalite = null;
										d_provenance = null;

										// # Output table : 'd_age'
										d_age_tmp.age = Var.age;
										d_age_tmp.cat_age = Var.cat_age;
										d_age = d_age_tmp;

										// # Output table : 'd_etu'
										d_etu_tmp.codeEtudiant = row1.code_etu;
										d_etu_tmp.nom = row1.nom_patro;
										d_etu_tmp.prenom = row1.prenom;
										d_etu = d_etu_tmp;

										// # Output table : 'd_bac'
										d_bac_tmp.bac = row1.bac;
										d_bac_tmp.cat_bac = null;
										d_bac = d_bac_tmp;

										// # Output table : 'd_geo'
										d_geo_tmp.ville = row1.bur_distr;
										d_geo_tmp.dept = row9.NCC_DEP;
										d_geo_tmp.region = row9.NCC_REG;
										d_geo_tmp.pays = row10.LIBCOG;
										d_geo = d_geo_tmp;

										// # Output table : 'd_nationalite'
										d_nationalite_tmp.nationalite = row1.nationalite;
										d_nationalite_tmp.cat_nationalite = null;
										d_nationalite = d_nationalite_tmp;

										// # Output table : 'd_provenance'
										d_provenance_tmp.provenance = row1.Provenance;
										d_provenance_tmp.cat_provenance = null;
										d_provenance = d_provenance_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */

									/**
									 * [tMap_1 process_data_begin ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_begin ] stop
									 */
									// Start of branch "d_age"
									if (d_age != null) {

										/**
										 * [tUniqRow_1 main ] start
										 */

										currentComponent = "tUniqRow_1";

										// d_age
										// d_age

										if (execStat) {
											runStat.updateStatOnConnection(
													"d_age" + iterateId, 1, 1);
										}

										row2 = null;
										finder_tUniqRow_1.age = d_age.age;
										finder_tUniqRow_1.hashCodeDirty = true;
										if (!keystUniqRow_1
												.contains(finder_tUniqRow_1)) {
											KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

											new_tUniqRow_1.age = d_age.age;

											keystUniqRow_1.add(new_tUniqRow_1);
											if (row2 == null) {

												row2 = new row2Struct();
											}
											row2.age = d_age.age;
											row2.cat_age = d_age.cat_age;
											nb_uniques_tUniqRow_1++;
										} else {
											nb_duplicates_tUniqRow_1++;
										}

										tos_count_tUniqRow_1++;

										/**
										 * [tUniqRow_1 main ] stop
										 */

										/**
										 * [tUniqRow_1 process_data_begin ]
										 * start
										 */

										currentComponent = "tUniqRow_1";

										/**
										 * [tUniqRow_1 process_data_begin ] stop
										 */
										// Start of branch "row2"
										if (row2 != null) {

											/**
											 * [tDBOutput_10 main ] start
											 */

											currentComponent = "tDBOutput_10";

											// row2
											// row2

											if (execStat) {
												runStat.updateStatOnConnection(
														"row2" + iterateId, 1,
														1);
											}

											whetherReject_tDBOutput_10 = false;
											pstmt_tDBOutput_10.setInt(1,
													row2.age);

											if (row2.cat_age == null) {
												pstmt_tDBOutput_10.setNull(2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_10.setString(2,
														row2.cat_age);
											}

											pstmt_tDBOutput_10.addBatch();
											nb_line_tDBOutput_10++;

											batchSizeCounter_tDBOutput_10++;
											if (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10) {
												try {
													int countSum_tDBOutput_10 = 0;
													for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10
															.executeBatch()) {
														countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_10 = 0;
													for (int countEach_tDBOutput_10 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
																: countEach_tDBOutput_10);
													}
													insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
													System.err.println(e
															.getMessage());
												}

												batchSizeCounter_tDBOutput_10 = 0;
											}
											commitCounter_tDBOutput_10++;

											if (commitEvery_tDBOutput_10 <= commitCounter_tDBOutput_10) {

												try {
													int countSum_tDBOutput_10 = 0;
													for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10
															.executeBatch()) {
														countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_10 = 0;
													for (int countEach_tDBOutput_10 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
																: countEach_tDBOutput_10);
													}
													insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
													System.err.println(e
															.getMessage());

												}
												conn_tDBOutput_10.commit();
												commitCounter_tDBOutput_10 = 0;

											}

											tos_count_tDBOutput_10++;

											/**
											 * [tDBOutput_10 main ] stop
											 */

											/**
											 * [tDBOutput_10 process_data_begin
											 * ] start
											 */

											currentComponent = "tDBOutput_10";

											/**
											 * [tDBOutput_10 process_data_begin
											 * ] stop
											 */

											/**
											 * [tDBOutput_10 process_data_end ]
											 * start
											 */

											currentComponent = "tDBOutput_10";

											/**
											 * [tDBOutput_10 process_data_end ]
											 * stop
											 */

										} // End of branch "row2"

										/**
										 * [tUniqRow_1 process_data_end ] start
										 */

										currentComponent = "tUniqRow_1";

										/**
										 * [tUniqRow_1 process_data_end ] stop
										 */

									} // End of branch "d_age"

									// Start of branch "d_etu"
									if (d_etu != null) {

										/**
										 * [tUniqRow_4 main ] start
										 */

										currentComponent = "tUniqRow_4";

										// d_etu
										// d_etu

										if (execStat) {
											runStat.updateStatOnConnection(
													"d_etu" + iterateId, 1, 1);
										}

										row5 = null;
										finder_tUniqRow_4.codeEtudiant = d_etu.codeEtudiant;
										finder_tUniqRow_4.hashCodeDirty = true;
										if (!keystUniqRow_4
												.contains(finder_tUniqRow_4)) {
											KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

											new_tUniqRow_4.codeEtudiant = d_etu.codeEtudiant;

											keystUniqRow_4.add(new_tUniqRow_4);
											if (row5 == null) {

												row5 = new row5Struct();
											}
											row5.codeEtudiant = d_etu.codeEtudiant;
											row5.nom = d_etu.nom;
											row5.prenom = d_etu.prenom;
											nb_uniques_tUniqRow_4++;
										} else {
											nb_duplicates_tUniqRow_4++;
										}

										tos_count_tUniqRow_4++;

										/**
										 * [tUniqRow_4 main ] stop
										 */

										/**
										 * [tUniqRow_4 process_data_begin ]
										 * start
										 */

										currentComponent = "tUniqRow_4";

										/**
										 * [tUniqRow_4 process_data_begin ] stop
										 */
										// Start of branch "row5"
										if (row5 != null) {

											/**
											 * [tDBOutput_6 main ] start
											 */

											currentComponent = "tDBOutput_6";

											// row5
											// row5

											if (execStat) {
												runStat.updateStatOnConnection(
														"row5" + iterateId, 1,
														1);
											}

											whetherReject_tDBOutput_6 = false;
											if (row5.codeEtudiant == null) {
												pstmt_tDBOutput_6.setNull(1,
														java.sql.Types.INTEGER);
											} else {
												pstmt_tDBOutput_6.setInt(1,
														row5.codeEtudiant);
											}

											if (row5.nom == null) {
												pstmt_tDBOutput_6.setNull(2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_6.setString(2,
														row5.nom);
											}

											if (row5.prenom == null) {
												pstmt_tDBOutput_6.setNull(3,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_6.setString(3,
														row5.prenom);
											}

											pstmt_tDBOutput_6.addBatch();
											nb_line_tDBOutput_6++;

											batchSizeCounter_tDBOutput_6++;
											if (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6) {
												try {
													int countSum_tDBOutput_6 = 0;
													for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
															.executeBatch()) {
														countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_6 = 0;
													for (int countEach_tDBOutput_6 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
																: countEach_tDBOutput_6);
													}
													insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
													System.err.println(e
															.getMessage());
												}

												batchSizeCounter_tDBOutput_6 = 0;
											}
											commitCounter_tDBOutput_6++;

											if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {

												try {
													int countSum_tDBOutput_6 = 0;
													for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
															.executeBatch()) {
														countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_6 = 0;
													for (int countEach_tDBOutput_6 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
																: countEach_tDBOutput_6);
													}
													insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
													System.err.println(e
															.getMessage());

												}
												conn_tDBOutput_6.commit();
												commitCounter_tDBOutput_6 = 0;

											}

											tos_count_tDBOutput_6++;

											/**
											 * [tDBOutput_6 main ] stop
											 */

											/**
											 * [tDBOutput_6 process_data_begin ]
											 * start
											 */

											currentComponent = "tDBOutput_6";

											/**
											 * [tDBOutput_6 process_data_begin ]
											 * stop
											 */

											/**
											 * [tDBOutput_6 process_data_end ]
											 * start
											 */

											currentComponent = "tDBOutput_6";

											/**
											 * [tDBOutput_6 process_data_end ]
											 * stop
											 */

										} // End of branch "row5"

										/**
										 * [tUniqRow_4 process_data_end ] start
										 */

										currentComponent = "tUniqRow_4";

										/**
										 * [tUniqRow_4 process_data_end ] stop
										 */

									} // End of branch "d_etu"

									// Start of branch "d_bac"
									if (d_bac != null) {

										/**
										 * [tUniqRow_3 main ] start
										 */

										currentComponent = "tUniqRow_3";

										// d_bac
										// d_bac

										if (execStat) {
											runStat.updateStatOnConnection(
													"d_bac" + iterateId, 1, 1);
										}

										row3 = null;
										finder_tUniqRow_3.bac = d_bac.bac;
										finder_tUniqRow_3.hashCodeDirty = true;
										if (!keystUniqRow_3
												.contains(finder_tUniqRow_3)) {
											KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

											new_tUniqRow_3.bac = d_bac.bac;

											keystUniqRow_3.add(new_tUniqRow_3);
											if (row3 == null) {

												row3 = new row3Struct();
											}
											row3.bac = d_bac.bac;
											row3.cat_bac = d_bac.cat_bac;
											nb_uniques_tUniqRow_3++;
										} else {
											nb_duplicates_tUniqRow_3++;
										}

										tos_count_tUniqRow_3++;

										/**
										 * [tUniqRow_3 main ] stop
										 */

										/**
										 * [tUniqRow_3 process_data_begin ]
										 * start
										 */

										currentComponent = "tUniqRow_3";

										/**
										 * [tUniqRow_3 process_data_begin ] stop
										 */
										// Start of branch "row3"
										if (row3 != null) {

											/**
											 * [tDBOutput_2 main ] start
											 */

											currentComponent = "tDBOutput_2";

											// row3
											// row3

											if (execStat) {
												runStat.updateStatOnConnection(
														"row3" + iterateId, 1,
														1);
											}

											whetherReject_tDBOutput_2 = false;
											if (row3.bac == null) {
												pstmt_tDBOutput_2.setNull(1,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_2.setString(1,
														row3.bac);
											}

											if (row3.cat_bac == null) {
												pstmt_tDBOutput_2.setNull(2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_2.setString(2,
														row3.cat_bac);
											}

											pstmt_tDBOutput_2.addBatch();
											nb_line_tDBOutput_2++;

											batchSizeCounter_tDBOutput_2++;
											if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
												try {
													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
															.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
													System.err.println(e
															.getMessage());
												}

												batchSizeCounter_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2++;

											if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

												try {
													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
															.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
													System.err.println(e
															.getMessage());

												}
												conn_tDBOutput_2.commit();
												commitCounter_tDBOutput_2 = 0;

											}

											tos_count_tDBOutput_2++;

											/**
											 * [tDBOutput_2 main ] stop
											 */

											/**
											 * [tDBOutput_2 process_data_begin ]
											 * start
											 */

											currentComponent = "tDBOutput_2";

											/**
											 * [tDBOutput_2 process_data_begin ]
											 * stop
											 */

											/**
											 * [tDBOutput_2 process_data_end ]
											 * start
											 */

											currentComponent = "tDBOutput_2";

											/**
											 * [tDBOutput_2 process_data_end ]
											 * stop
											 */

										} // End of branch "row3"

										/**
										 * [tUniqRow_3 process_data_end ] start
										 */

										currentComponent = "tUniqRow_3";

										/**
										 * [tUniqRow_3 process_data_end ] stop
										 */

									} // End of branch "d_bac"

									// Start of branch "d_geo"
									if (d_geo != null) {

										/**
										 * [tUniqRow_5 main ] start
										 */

										currentComponent = "tUniqRow_5";

										// d_geo
										// d_geo

										if (execStat) {
											runStat.updateStatOnConnection(
													"d_geo" + iterateId, 1, 1);
										}

										row6 = null;
										if (d_geo.ville == null) {
											finder_tUniqRow_5.ville = null;
										} else {
											finder_tUniqRow_5.ville = d_geo.ville
													.toLowerCase();
										}
										finder_tUniqRow_5.hashCodeDirty = true;
										if (!keystUniqRow_5
												.contains(finder_tUniqRow_5)) {
											KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

											if (d_geo.ville == null) {
												new_tUniqRow_5.ville = null;
											} else {
												new_tUniqRow_5.ville = d_geo.ville
														.toLowerCase();
											}

											keystUniqRow_5.add(new_tUniqRow_5);
											if (row6 == null) {

												row6 = new row6Struct();
											}
											row6.ville = d_geo.ville;
											row6.dept = d_geo.dept;
											row6.region = d_geo.region;
											row6.pays = d_geo.pays;
											nb_uniques_tUniqRow_5++;
										} else {
											nb_duplicates_tUniqRow_5++;
										}

										tos_count_tUniqRow_5++;

										/**
										 * [tUniqRow_5 main ] stop
										 */

										/**
										 * [tUniqRow_5 process_data_begin ]
										 * start
										 */

										currentComponent = "tUniqRow_5";

										/**
										 * [tUniqRow_5 process_data_begin ] stop
										 */
										// Start of branch "row6"
										if (row6 != null) {

											/**
											 * [tDBOutput_8 main ] start
											 */

											currentComponent = "tDBOutput_8";

											// row6
											// row6

											if (execStat) {
												runStat.updateStatOnConnection(
														"row6" + iterateId, 1,
														1);
											}

											whetherReject_tDBOutput_8 = false;
											if (row6.ville == null) {
												pstmt_tDBOutput_8.setNull(1,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_8.setString(1,
														row6.ville);
											}

											if (row6.dept == null) {
												pstmt_tDBOutput_8.setNull(2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_8.setString(2,
														row6.dept);
											}

											if (row6.region == null) {
												pstmt_tDBOutput_8.setNull(3,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_8.setString(3,
														row6.region);
											}

											if (row6.pays == null) {
												pstmt_tDBOutput_8.setNull(4,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_8.setString(4,
														row6.pays);
											}

											pstmt_tDBOutput_8.addBatch();
											nb_line_tDBOutput_8++;

											batchSizeCounter_tDBOutput_8++;
											if (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8) {
												try {
													int countSum_tDBOutput_8 = 0;
													for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
															.executeBatch()) {
														countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_8 = 0;
													for (int countEach_tDBOutput_8 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
																: countEach_tDBOutput_8);
													}
													insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
													System.err.println(e
															.getMessage());
												}

												batchSizeCounter_tDBOutput_8 = 0;
											}
											commitCounter_tDBOutput_8++;

											if (commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {

												try {
													int countSum_tDBOutput_8 = 0;
													for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
															.executeBatch()) {
														countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_8 = 0;
													for (int countEach_tDBOutput_8 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
																: countEach_tDBOutput_8);
													}
													insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
													System.err.println(e
															.getMessage());

												}
												conn_tDBOutput_8.commit();
												commitCounter_tDBOutput_8 = 0;

											}

											tos_count_tDBOutput_8++;

											/**
											 * [tDBOutput_8 main ] stop
											 */

											/**
											 * [tDBOutput_8 process_data_begin ]
											 * start
											 */

											currentComponent = "tDBOutput_8";

											/**
											 * [tDBOutput_8 process_data_begin ]
											 * stop
											 */

											/**
											 * [tDBOutput_8 process_data_end ]
											 * start
											 */

											currentComponent = "tDBOutput_8";

											/**
											 * [tDBOutput_8 process_data_end ]
											 * stop
											 */

										} // End of branch "row6"

										/**
										 * [tUniqRow_5 process_data_end ] start
										 */

										currentComponent = "tUniqRow_5";

										/**
										 * [tUniqRow_5 process_data_end ] stop
										 */

									} // End of branch "d_geo"

									// Start of branch "d_nationalite"
									if (d_nationalite != null) {

										/**
										 * [tUniqRow_6 main ] start
										 */

										currentComponent = "tUniqRow_6";

										// d_nationalite
										// d_nationalite

										if (execStat) {
											runStat.updateStatOnConnection(
													"d_nationalite" + iterateId,
													1, 1);
										}

										row7 = null;
										finder_tUniqRow_6.nationalite = d_nationalite.nationalite;
										finder_tUniqRow_6.hashCodeDirty = true;
										if (!keystUniqRow_6
												.contains(finder_tUniqRow_6)) {
											KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

											new_tUniqRow_6.nationalite = d_nationalite.nationalite;

											keystUniqRow_6.add(new_tUniqRow_6);
											if (row7 == null) {

												row7 = new row7Struct();
											}
											row7.nationalite = d_nationalite.nationalite;
											row7.cat_nationalite = d_nationalite.cat_nationalite;
											nb_uniques_tUniqRow_6++;
										} else {
											nb_duplicates_tUniqRow_6++;
										}

										tos_count_tUniqRow_6++;

										/**
										 * [tUniqRow_6 main ] stop
										 */

										/**
										 * [tUniqRow_6 process_data_begin ]
										 * start
										 */

										currentComponent = "tUniqRow_6";

										/**
										 * [tUniqRow_6 process_data_begin ] stop
										 */
										// Start of branch "row7"
										if (row7 != null) {

											/**
											 * [tDBOutput_11 main ] start
											 */

											currentComponent = "tDBOutput_11";

											// row7
											// row7

											if (execStat) {
												runStat.updateStatOnConnection(
														"row7" + iterateId, 1,
														1);
											}

											whetherReject_tDBOutput_11 = false;
											if (row7.nationalite == null) {
												pstmt_tDBOutput_11.setNull(1,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_11.setString(1,
														row7.nationalite);
											}

											if (row7.cat_nationalite == null) {
												pstmt_tDBOutput_11.setNull(2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_11.setString(2,
														row7.cat_nationalite);
											}

											pstmt_tDBOutput_11.addBatch();
											nb_line_tDBOutput_11++;

											batchSizeCounter_tDBOutput_11++;
											if (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11) {
												try {
													int countSum_tDBOutput_11 = 0;
													for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
															.executeBatch()) {
														countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_11 = 0;
													for (int countEach_tDBOutput_11 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
																: countEach_tDBOutput_11);
													}
													insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
													System.err.println(e
															.getMessage());
												}

												batchSizeCounter_tDBOutput_11 = 0;
											}
											commitCounter_tDBOutput_11++;

											if (commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {

												try {
													int countSum_tDBOutput_11 = 0;
													for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
															.executeBatch()) {
														countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_11 = 0;
													for (int countEach_tDBOutput_11 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
																: countEach_tDBOutput_11);
													}
													insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
													System.err.println(e
															.getMessage());

												}
												conn_tDBOutput_11.commit();
												commitCounter_tDBOutput_11 = 0;

											}

											tos_count_tDBOutput_11++;

											/**
											 * [tDBOutput_11 main ] stop
											 */

											/**
											 * [tDBOutput_11 process_data_begin
											 * ] start
											 */

											currentComponent = "tDBOutput_11";

											/**
											 * [tDBOutput_11 process_data_begin
											 * ] stop
											 */

											/**
											 * [tDBOutput_11 process_data_end ]
											 * start
											 */

											currentComponent = "tDBOutput_11";

											/**
											 * [tDBOutput_11 process_data_end ]
											 * stop
											 */

										} // End of branch "row7"

										/**
										 * [tUniqRow_6 process_data_end ] start
										 */

										currentComponent = "tUniqRow_6";

										/**
										 * [tUniqRow_6 process_data_end ] stop
										 */

									} // End of branch "d_nationalite"

									// Start of branch "d_provenance"
									if (d_provenance != null) {

										/**
										 * [tUniqRow_8 main ] start
										 */

										currentComponent = "tUniqRow_8";

										// d_provenance
										// d_provenance

										if (execStat) {
											runStat.updateStatOnConnection(
													"d_provenance" + iterateId,
													1, 1);
										}

										row8 = null;
										finder_tUniqRow_8.provenance = d_provenance.provenance;
										finder_tUniqRow_8.hashCodeDirty = true;
										if (!keystUniqRow_8
												.contains(finder_tUniqRow_8)) {
											KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

											new_tUniqRow_8.provenance = d_provenance.provenance;

											keystUniqRow_8.add(new_tUniqRow_8);
											if (row8 == null) {

												row8 = new row8Struct();
											}
											row8.provenance = d_provenance.provenance;
											row8.cat_provenance = d_provenance.cat_provenance;
											nb_uniques_tUniqRow_8++;
										} else {
											nb_duplicates_tUniqRow_8++;
										}

										tos_count_tUniqRow_8++;

										/**
										 * [tUniqRow_8 main ] stop
										 */

										/**
										 * [tUniqRow_8 process_data_begin ]
										 * start
										 */

										currentComponent = "tUniqRow_8";

										/**
										 * [tUniqRow_8 process_data_begin ] stop
										 */
										// Start of branch "row8"
										if (row8 != null) {

											/**
											 * [tDBOutput_13 main ] start
											 */

											currentComponent = "tDBOutput_13";

											// row8
											// row8

											if (execStat) {
												runStat.updateStatOnConnection(
														"row8" + iterateId, 1,
														1);
											}

											whetherReject_tDBOutput_13 = false;
											if (row8.provenance == null) {
												pstmt_tDBOutput_13.setNull(1,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_13.setString(1,
														row8.provenance);
											}

											if (row8.cat_provenance == null) {
												pstmt_tDBOutput_13.setNull(2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_13.setString(2,
														row8.cat_provenance);
											}

											pstmt_tDBOutput_13.addBatch();
											nb_line_tDBOutput_13++;

											batchSizeCounter_tDBOutput_13++;
											if (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13) {
												try {
													int countSum_tDBOutput_13 = 0;
													for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13
															.executeBatch()) {
														countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_13 = 0;
													for (int countEach_tDBOutput_13 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
																: countEach_tDBOutput_13);
													}
													insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
													System.err.println(e
															.getMessage());
												}

												batchSizeCounter_tDBOutput_13 = 0;
											}
											commitCounter_tDBOutput_13++;

											if (commitEvery_tDBOutput_13 <= commitCounter_tDBOutput_13) {

												try {
													int countSum_tDBOutput_13 = 0;
													for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13
															.executeBatch()) {
														countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_13 = 0;
													for (int countEach_tDBOutput_13 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
																: countEach_tDBOutput_13);
													}
													insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
													System.err.println(e
															.getMessage());

												}
												conn_tDBOutput_13.commit();
												commitCounter_tDBOutput_13 = 0;

											}

											tos_count_tDBOutput_13++;

											/**
											 * [tDBOutput_13 main ] stop
											 */

											/**
											 * [tDBOutput_13 process_data_begin
											 * ] start
											 */

											currentComponent = "tDBOutput_13";

											/**
											 * [tDBOutput_13 process_data_begin
											 * ] stop
											 */

											/**
											 * [tDBOutput_13 process_data_end ]
											 * start
											 */

											currentComponent = "tDBOutput_13";

											/**
											 * [tDBOutput_13 process_data_end ]
											 * stop
											 */

										} // End of branch "row8"

										/**
										 * [tUniqRow_8 process_data_end ] start
										 */

										currentComponent = "tUniqRow_8";

										/**
										 * [tUniqRow_8 process_data_end ] stop
										 */

									} // End of branch "d_provenance"

								} // close loop of lookup 'row9' // G_TM_M_043

							} // close loop of lookup 'row10' // G_TM_M_043

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/fusionOut.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES",
						nb_duplicates_tUniqRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("d_age" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_10 end ] start
				 */

				currentComponent = "tDBOutput_10";

				try {
					if (batchSizeCounter_tDBOutput_10 != 0) {
						int countSum_tDBOutput_10 = 0;

						for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10
								.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_10 = 0;
					for (int countEach_tDBOutput_10 : e.getUpdateCounts()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
								: countEach_tDBOutput_10);
					}

					insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_10 = 0;

				if (pstmt_tDBOutput_10 != null) {

					pstmt_tDBOutput_10.close();

				}

				if (commitCounter_tDBOutput_10 > 0) {

					conn_tDBOutput_10.commit();

				}

				conn_tDBOutput_10.close();

				resourceMap.put("finish_tDBOutput_10", true);

				nb_line_deleted_tDBOutput_10 = nb_line_deleted_tDBOutput_10
						+ deletedCount_tDBOutput_10;
				nb_line_update_tDBOutput_10 = nb_line_update_tDBOutput_10
						+ updatedCount_tDBOutput_10;
				nb_line_inserted_tDBOutput_10 = nb_line_inserted_tDBOutput_10
						+ insertedCount_tDBOutput_10;
				nb_line_rejected_tDBOutput_10 = nb_line_rejected_tDBOutput_10
						+ rejectedCount_tDBOutput_10;

				globalMap.put("tDBOutput_10_NB_LINE", nb_line_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_10);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_10", true);
				end_Hash.put("tDBOutput_10", System.currentTimeMillis());

				/**
				 * [tDBOutput_10 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES",
						nb_duplicates_tUniqRow_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("d_etu" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (batchSizeCounter_tDBOutput_6 != 0) {
						int countSum_tDBOutput_6 = 0;

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
								.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
								: countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_6 = 0;

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();

				}

				if (commitCounter_tDBOutput_6 > 0) {

					conn_tDBOutput_6.commit();

				}

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6
						+ deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6
						+ updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6
						+ insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6
						+ rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES",
						nb_duplicates_tUniqRow_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("d_bac" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 != 0) {
						int countSum_tDBOutput_2 = 0;

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_2 = 0;

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();

				}

				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES",
						nb_duplicates_tUniqRow_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("d_geo" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (batchSizeCounter_tDBOutput_8 != 0) {
						int countSum_tDBOutput_8 = 0;

						for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
								.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_8 = 0;
					for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
								: countEach_tDBOutput_8);
					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_8 = 0;

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();

				}

				if (commitCounter_tDBOutput_8 > 0) {

					conn_tDBOutput_8.commit();

				}

				conn_tDBOutput_8.close();

				resourceMap.put("finish_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8
						+ deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8
						+ updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8
						+ insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8
						+ rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES",
						nb_duplicates_tUniqRow_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("d_nationalite"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tDBOutput_11 end ] start
				 */

				currentComponent = "tDBOutput_11";

				try {
					if (batchSizeCounter_tDBOutput_11 != 0) {
						int countSum_tDBOutput_11 = 0;

						for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
								.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_11 = 0;
					for (int countEach_tDBOutput_11 : e.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
								: countEach_tDBOutput_11);
					}

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_11 = 0;

				if (pstmt_tDBOutput_11 != null) {

					pstmt_tDBOutput_11.close();

				}

				if (commitCounter_tDBOutput_11 > 0) {

					conn_tDBOutput_11.commit();

				}

				conn_tDBOutput_11.close();

				resourceMap.put("finish_tDBOutput_11", true);

				nb_line_deleted_tDBOutput_11 = nb_line_deleted_tDBOutput_11
						+ deletedCount_tDBOutput_11;
				nb_line_update_tDBOutput_11 = nb_line_update_tDBOutput_11
						+ updatedCount_tDBOutput_11;
				nb_line_inserted_tDBOutput_11 = nb_line_inserted_tDBOutput_11
						+ insertedCount_tDBOutput_11;
				nb_line_rejected_tDBOutput_11 = nb_line_rejected_tDBOutput_11
						+ rejectedCount_tDBOutput_11;

				globalMap.put("tDBOutput_11_NB_LINE", nb_line_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_11);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_11", true);
				end_Hash.put("tDBOutput_11", System.currentTimeMillis());

				/**
				 * [tDBOutput_11 end ] stop
				 */

				/**
				 * [tUniqRow_8 end ] start
				 */

				currentComponent = "tUniqRow_8";

				globalMap.put("tUniqRow_8_NB_UNIQUES", nb_uniques_tUniqRow_8);
				globalMap.put("tUniqRow_8_NB_DUPLICATES",
						nb_duplicates_tUniqRow_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("d_provenance"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_8", true);
				end_Hash.put("tUniqRow_8", System.currentTimeMillis());

				/**
				 * [tUniqRow_8 end ] stop
				 */

				/**
				 * [tDBOutput_13 end ] start
				 */

				currentComponent = "tDBOutput_13";

				try {
					if (batchSizeCounter_tDBOutput_13 != 0) {
						int countSum_tDBOutput_13 = 0;

						for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13
								.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_13 = 0;
					for (int countEach_tDBOutput_13 : e.getUpdateCounts()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
								: countEach_tDBOutput_13);
					}

					insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_13 = 0;

				if (pstmt_tDBOutput_13 != null) {

					pstmt_tDBOutput_13.close();

				}

				if (commitCounter_tDBOutput_13 > 0) {

					conn_tDBOutput_13.commit();

				}

				conn_tDBOutput_13.close();

				resourceMap.put("finish_tDBOutput_13", true);

				nb_line_deleted_tDBOutput_13 = nb_line_deleted_tDBOutput_13
						+ deletedCount_tDBOutput_13;
				nb_line_update_tDBOutput_13 = nb_line_update_tDBOutput_13
						+ updatedCount_tDBOutput_13;
				nb_line_inserted_tDBOutput_13 = nb_line_inserted_tDBOutput_13
						+ insertedCount_tDBOutput_13;
				nb_line_rejected_tDBOutput_13 = nb_line_rejected_tDBOutput_13
						+ rejectedCount_tDBOutput_13;

				globalMap.put("tDBOutput_13_NB_LINE", nb_line_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_13);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_13", true);
				end_Hash.put("tDBOutput_13", System.currentTimeMillis());

				/**
				 * [tDBOutput_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row9");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row10");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_10 finally ] start
				 */

				currentComponent = "tDBOutput_10";

				if (resourceMap.get("finish_tDBOutput_10") == null) {
					if (resourceMap.get("conn_tDBOutput_10") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_10 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_10");

							ctn_tDBOutput_10.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_10) {
							String errorMessage_tDBOutput_10 = "failed to close the connection in tDBOutput_10 :"
									+ sqlEx_tDBOutput_10.getMessage();

							System.err.println(errorMessage_tDBOutput_10);
						}
					}
				}

				/**
				 * [tDBOutput_10 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				if (resourceMap.get("finish_tDBOutput_6") == null) {
					if (resourceMap.get("conn_tDBOutput_6") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_6 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_6");

							ctn_tDBOutput_6.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
							String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
									+ sqlEx_tDBOutput_6.getMessage();

							System.err.println(errorMessage_tDBOutput_6);
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("finish_tDBOutput_2") == null) {
					if (resourceMap.get("conn_tDBOutput_2") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_2");

							ctn_tDBOutput_2.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
							String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
									+ sqlEx_tDBOutput_2.getMessage();

							System.err.println(errorMessage_tDBOutput_2);
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tUniqRow_5 finally ] start
				 */

				currentComponent = "tUniqRow_5";

				/**
				 * [tUniqRow_5 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				if (resourceMap.get("finish_tDBOutput_8") == null) {
					if (resourceMap.get("conn_tDBOutput_8") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_8 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_8");

							ctn_tDBOutput_8.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_8) {
							String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :"
									+ sqlEx_tDBOutput_8.getMessage();

							System.err.println(errorMessage_tDBOutput_8);
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

				/**
				 * [tUniqRow_6 finally ] start
				 */

				currentComponent = "tUniqRow_6";

				/**
				 * [tUniqRow_6 finally ] stop
				 */

				/**
				 * [tDBOutput_11 finally ] start
				 */

				currentComponent = "tDBOutput_11";

				if (resourceMap.get("finish_tDBOutput_11") == null) {
					if (resourceMap.get("conn_tDBOutput_11") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_11 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_11");

							ctn_tDBOutput_11.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_11) {
							String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :"
									+ sqlEx_tDBOutput_11.getMessage();

							System.err.println(errorMessage_tDBOutput_11);
						}
					}
				}

				/**
				 * [tDBOutput_11 finally ] stop
				 */

				/**
				 * [tUniqRow_8 finally ] start
				 */

				currentComponent = "tUniqRow_8";

				/**
				 * [tUniqRow_8 finally ] stop
				 */

				/**
				 * [tDBOutput_13 finally ] start
				 */

				currentComponent = "tDBOutput_13";

				if (resourceMap.get("finish_tDBOutput_13") == null) {
					if (resourceMap.get("conn_tDBOutput_13") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_13 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_13");

							ctn_tDBOutput_13.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_13) {
							String errorMessage_tDBOutput_13 = "failed to close the connection in tDBOutput_13 :"
									+ sqlEx_tDBOutput_13.getMessage();

							System.err.println(errorMessage_tDBOutput_13);
						}
					}
				}

				/**
				 * [tDBOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer REGION;

		public Integer getREGION() {
			return this.REGION;
		}

		public String DEP;

		public String getDEP() {
			return this.DEP;
		}

		public String CHEFLIEU_DEP;

		public String getCHEFLIEU_DEP() {
			return this.CHEFLIEU_DEP;
		}

		public Integer TNCC_DEP;

		public Integer getTNCC_DEP() {
			return this.TNCC_DEP;
		}

		public String NCC_DEP;

		public String getNCC_DEP() {
			return this.NCC_DEP;
		}

		public String NCCENR_DEP;

		public String getNCCENR_DEP() {
			return this.NCCENR_DEP;
		}

		public String CHEFLIEU_REG;

		public String getCHEFLIEU_REG() {
			return this.CHEFLIEU_REG;
		}

		public Integer TNCC_REG;

		public Integer getTNCC_REG() {
			return this.TNCC_REG;
		}

		public String NCC_REG;

		public String getNCC_REG() {
			return this.NCC_REG;
		}

		public String NCCENR_REG;

		public String getNCCENR_REG() {
			return this.NCCENR_REG;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.DEP == null) ? 0 : this.DEP.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.DEP == null) {
				if (other.DEP != null)
					return false;

			} else if (!this.DEP.equals(other.DEP))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.REGION = this.REGION;
			other.DEP = this.DEP;
			other.CHEFLIEU_DEP = this.CHEFLIEU_DEP;
			other.TNCC_DEP = this.TNCC_DEP;
			other.NCC_DEP = this.NCC_DEP;
			other.NCCENR_DEP = this.NCCENR_DEP;
			other.CHEFLIEU_REG = this.CHEFLIEU_REG;
			other.TNCC_REG = this.TNCC_REG;
			other.NCC_REG = this.NCC_REG;
			other.NCCENR_REG = this.NCCENR_REG;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.DEP = this.DEP;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.DEP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DEP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.REGION = readInteger(dis, ois);

				this.CHEFLIEU_DEP = readString(dis, ois);

				this.TNCC_DEP = readInteger(dis, ois);

				this.NCC_DEP = readString(dis, ois);

				this.NCCENR_DEP = readString(dis, ois);

				this.CHEFLIEU_REG = readString(dis, ois);

				this.TNCC_REG = readInteger(dis, ois);

				this.NCC_REG = readString(dis, ois);

				this.NCCENR_REG = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.REGION, dos, oos);

				writeString(this.CHEFLIEU_DEP, dos, oos);

				writeInteger(this.TNCC_DEP, dos, oos);

				writeString(this.NCC_DEP, dos, oos);

				writeString(this.NCCENR_DEP, dos, oos);

				writeString(this.CHEFLIEU_REG, dos, oos);

				writeInteger(this.TNCC_REG, dos, oos);

				writeString(this.NCC_REG, dos, oos);

				writeString(this.NCCENR_REG, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION=" + String.valueOf(REGION));
			sb.append(",DEP=" + DEP);
			sb.append(",CHEFLIEU_DEP=" + CHEFLIEU_DEP);
			sb.append(",TNCC_DEP=" + String.valueOf(TNCC_DEP));
			sb.append(",NCC_DEP=" + NCC_DEP);
			sb.append(",NCCENR_DEP=" + NCCENR_DEP);
			sb.append(",CHEFLIEU_REG=" + CHEFLIEU_REG);
			sb.append(",TNCC_REG=" + String.valueOf(TNCC_REG));
			sb.append(",NCC_REG=" + NCC_REG);
			sb.append(",NCCENR_REG=" + NCCENR_REG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DEP, other.DEP);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row9 = 0;

				class BytesLimit65535_tAdvancedHash_row9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row9().limitLog4jByte();

				// connection name:row9
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row9,row9) |
				// target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
				// linked node: tMap_1 - inputs:(row1,row9,row10)
				// outputs:(d_age,d_etu,d_bac,d_geo,d_nationalite,d_provenance)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				class BytesLimit65535_tFileInputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/regiondept.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/regiondept.csv",
								"windows-1252", ";", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row9 = null;

						row9 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row9 = new row9Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();
							if (temp.length() > 0) {

								try {

									row9.REGION = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"REGION", "row9",
															temp,
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
								}

							} else {

								row9.REGION = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row9.DEP = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row9.CHEFLIEU_DEP = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();
							if (temp.length() > 0) {

								try {

									row9.TNCC_DEP = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"TNCC_DEP", "row9",
															temp,
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
								}

							} else {

								row9.TNCC_DEP = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row9.NCC_DEP = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row9.NCCENR_DEP = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row9.CHEFLIEU_REG = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 7;

							temp = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();
							if (temp.length() > 0) {

								try {

									row9.TNCC_REG = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"TNCC_REG", "row9",
															temp,
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
								}

							} else {

								row9.TNCC_REG = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row9.NCC_REG = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row9.NCCENR_REG = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tAdvancedHash_row9 main ] start
							 */

							currentComponent = "tAdvancedHash_row9";

							// row9
							// row9

							if (execStat) {
								runStat.updateStatOnConnection("row9"
										+ iterateId, 1, 1);
							}

							row9Struct row9_HashRow = new row9Struct();

							row9_HashRow.REGION = row9.REGION;

							row9_HashRow.DEP = row9.DEP;

							row9_HashRow.CHEFLIEU_DEP = row9.CHEFLIEU_DEP;

							row9_HashRow.TNCC_DEP = row9.TNCC_DEP;

							row9_HashRow.NCC_DEP = row9.NCC_DEP;

							row9_HashRow.NCCENR_DEP = row9.NCCENR_DEP;

							row9_HashRow.CHEFLIEU_REG = row9.CHEFLIEU_REG;

							row9_HashRow.TNCC_REG = row9.TNCC_REG;

							row9_HashRow.NCC_REG = row9.NCC_REG;

							row9_HashRow.NCCENR_REG = row9.NCCENR_REG;

							tHash_Lookup_row9.put(row9_HashRow);

							tos_count_tAdvancedHash_row9++;

							/**
							 * [tAdvancedHash_row9 main ] stop
							 */

							/**
							 * [tAdvancedHash_row9 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row9";

							/**
							 * [tAdvancedHash_row9 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row9 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row9";

							/**
							 * [tAdvancedHash_row9 process_data_end ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/regiondept.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_DATA_INTEGRATION_Load_EDD = new byte[0];
		static byte[] commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String COG;

		public String getCOG() {
			return this.COG;
		}

		public Integer ACTUAL;

		public Integer getACTUAL() {
			return this.ACTUAL;
		}

		public String CAPAY;

		public String getCAPAY() {
			return this.CAPAY;
		}

		public String CRPAY;

		public String getCRPAY() {
			return this.CRPAY;
		}

		public String ANI;

		public String getANI() {
			return this.ANI;
		}

		public String LIBCOG;

		public String getLIBCOG() {
			return this.LIBCOG;
		}

		public String LIBENR;

		public String getLIBENR() {
			return this.LIBENR;
		}

		public String ANCNOM;

		public String getANCNOM() {
			return this.ANCNOM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.COG == null) ? 0 : this.COG.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.COG == null) {
				if (other.COG != null)
					return false;

			} else if (!this.COG.equals(other.COG))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.COG = this.COG;
			other.ACTUAL = this.ACTUAL;
			other.CAPAY = this.CAPAY;
			other.CRPAY = this.CRPAY;
			other.ANI = this.ANI;
			other.LIBCOG = this.LIBCOG;
			other.LIBENR = this.LIBENR;
			other.ANCNOM = this.ANCNOM;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.COG = this.COG;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATA_INTEGRATION_Load_EDD.length) {
					if (length < 1024
							&& commonByteArray_DATA_INTEGRATION_Load_EDD.length == 0) {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[1024];
					} else {
						commonByteArray_DATA_INTEGRATION_Load_EDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATA_INTEGRATION_Load_EDD, 0,
						length);
				strReturn = new String(
						commonByteArray_DATA_INTEGRATION_Load_EDD, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATA_INTEGRATION_Load_EDD) {

				try {

					int length = 0;

					this.COG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.COG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ACTUAL = readInteger(dis, ois);

				this.CAPAY = readString(dis, ois);

				this.CRPAY = readString(dis, ois);

				this.ANI = readString(dis, ois);

				this.LIBCOG = readString(dis, ois);

				this.LIBENR = readString(dis, ois);

				this.ANCNOM = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ACTUAL, dos, oos);

				writeString(this.CAPAY, dos, oos);

				writeString(this.CRPAY, dos, oos);

				writeString(this.ANI, dos, oos);

				writeString(this.LIBCOG, dos, oos);

				writeString(this.LIBENR, dos, oos);

				writeString(this.ANCNOM, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("COG=" + COG);
			sb.append(",ACTUAL=" + String.valueOf(ACTUAL));
			sb.append(",CAPAY=" + CAPAY);
			sb.append(",CRPAY=" + CRPAY);
			sb.append(",ANI=" + ANI);
			sb.append(",LIBCOG=" + LIBCOG);
			sb.append(",LIBENR=" + LIBENR);
			sb.append(",ANCNOM=" + ANCNOM);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.COG, other.COG);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row10 = 0;

				class BytesLimit65535_tAdvancedHash_row10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row10().limitLog4jByte();

				// connection name:row10
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_1 - inputs:(row1,row9,row10)
				// outputs:(d_age,d_etu,d_bac,d_geo,d_nationalite,d_provenance)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				class BytesLimit65535_tFileInputDelimited_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Users/thlavigne1/Desktop/Talend_files/pays.txt";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/thlavigne1/Desktop/Talend_files/pays.txt",
								"windows-1252", "\t", "\n", false, 1, 0, -1,
								-1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row10 = null;

						row10 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row10 = new row10Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row10.COG = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 1;

							temp = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();
							if (temp.length() > 0) {

								try {

									row10.ACTUAL = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ACTUAL", "row10",
															temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row10.ACTUAL = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row10.CAPAY = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row10.CRPAY = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row10.ANI = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row10.LIBCOG = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 6;

							row10.LIBENR = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row10.ANCNOM = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tAdvancedHash_row10 main ] start
							 */

							currentComponent = "tAdvancedHash_row10";

							// row10
							// row10

							if (execStat) {
								runStat.updateStatOnConnection("row10"
										+ iterateId, 1, 1);
							}

							row10Struct row10_HashRow = new row10Struct();

							row10_HashRow.COG = row10.COG;

							row10_HashRow.ACTUAL = row10.ACTUAL;

							row10_HashRow.CAPAY = row10.CAPAY;

							row10_HashRow.CRPAY = row10.CRPAY;

							row10_HashRow.ANI = row10.ANI;

							row10_HashRow.LIBCOG = row10.LIBCOG;

							row10_HashRow.LIBENR = row10.LIBENR;

							row10_HashRow.ANCNOM = row10.ANCNOM;

							tHash_Lookup_row10.put(row10_HashRow);

							tos_count_tAdvancedHash_row10++;

							/**
							 * [tAdvancedHash_row10 main ] stop
							 */

							/**
							 * [tAdvancedHash_row10 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row10";

							/**
							 * [tAdvancedHash_row10 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row10 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row10";

							/**
							 * [tAdvancedHash_row10 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Users/thlavigne1/Desktop/Talend_files/pays.txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Load_EDD Load_EDDClass = new Load_EDD();

		int exitCode = Load_EDDClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Load_EDD.class.getClassLoader()
					.getResourceAsStream(
							"data_integration/load_edd_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = Load_EDD.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Load_EDD");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 254127 characters generated by Talend Open Studio for MDM on the 14 juin 2019
 * 13:59:59 CEST
 ************************************************************************************************/
