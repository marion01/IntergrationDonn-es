// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for MDM
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package recoupementfichiers.todatabase__0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.MDM;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ToDatabase_ Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class ToDatabase_ implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ToDatabase_";
	private final String projectName = "RECOUPEMENTFICHIERS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ToDatabase_.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ToDatabase_.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];
    static byte[] commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];

	
			    public String NomFiliere;

				public String getNomFiliere () {
					return this.NomFiliere;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length) {
				if(length < 1024 && commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length == 0) {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[1024];
				} else {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length);
			strReturn = new String(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_) {

        	try {

        		int length = 0;
		
					this.NomFiliere = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NomFiliere,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NomFiliere="+NomFiliere);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];
    static byte[] commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];

	
			    public String nomProf;

				public String getNomProf () {
					return this.nomProf;
				}
				
			    public String prenomProf;

				public String getPrenomProf () {
					return this.prenomProf;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length) {
				if(length < 1024 && commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length == 0) {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[1024];
				} else {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length);
			strReturn = new String(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_) {

        	try {

        		int length = 0;
		
					this.nomProf = readString(dis);
					
					this.prenomProf = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nomProf,dos);
					
					// String
				
						writeString(this.prenomProf,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nomProf="+nomProf);
		sb.append(",prenomProf="+prenomProf);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];
    static byte[] commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];

	
			    public String NomEtudiant;

				public String getNomEtudiant () {
					return this.NomEtudiant;
				}
				
			    public String PrenomEtudiant;

				public String getPrenomEtudiant () {
					return this.PrenomEtudiant;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length) {
				if(length < 1024 && commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length == 0) {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[1024];
				} else {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length);
			strReturn = new String(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_) {

        	try {

        		int length = 0;
		
					this.NomEtudiant = readString(dis);
					
					this.PrenomEtudiant = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NomEtudiant,dos);
					
					// String
				
						writeString(this.PrenomEtudiant,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NomEtudiant="+NomEtudiant);
		sb.append(",PrenomEtudiant="+PrenomEtudiant);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class StudentStruct implements routines.system.IPersistableRow<StudentStruct> {
    final static byte[] commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];
    static byte[] commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];

	
			    public String NomEtudiant;

				public String getNomEtudiant () {
					return this.NomEtudiant;
				}
				
			    public String PrenomEtudiant;

				public String getPrenomEtudiant () {
					return this.PrenomEtudiant;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length) {
				if(length < 1024 && commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length == 0) {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[1024];
				} else {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length);
			strReturn = new String(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_) {

        	try {

        		int length = 0;
		
					this.NomEtudiant = readString(dis);
					
					this.PrenomEtudiant = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NomEtudiant,dos);
					
					// String
				
						writeString(this.PrenomEtudiant,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NomEtudiant="+NomEtudiant);
		sb.append(",PrenomEtudiant="+PrenomEtudiant);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(StudentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TeacherStruct implements routines.system.IPersistableRow<TeacherStruct> {
    final static byte[] commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];
    static byte[] commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];

	
			    public String nomProf;

				public String getNomProf () {
					return this.nomProf;
				}
				
			    public String prenomProf;

				public String getPrenomProf () {
					return this.prenomProf;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length) {
				if(length < 1024 && commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length == 0) {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[1024];
				} else {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length);
			strReturn = new String(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_) {

        	try {

        		int length = 0;
		
					this.nomProf = readString(dis);
					
					this.prenomProf = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nomProf,dos);
					
					// String
				
						writeString(this.prenomProf,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nomProf="+nomProf);
		sb.append(",prenomProf="+prenomProf);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TeacherStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Filiere0Struct implements routines.system.IPersistableRow<Filiere0Struct> {
    final static byte[] commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];
    static byte[] commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];

	
			    public String NomFiliere;

				public String getNomFiliere () {
					return this.NomFiliere;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length) {
				if(length < 1024 && commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length == 0) {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[1024];
				} else {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length);
			strReturn = new String(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_) {

        	try {

        		int length = 0;
		
					this.NomFiliere = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NomFiliere,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NomFiliere="+NomFiliere);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Filiere0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];
    static byte[] commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[0];

	
			    public String ProfNom;

				public String getProfNom () {
					return this.ProfNom;
				}
				
			    public String ProfPrenom;

				public String getProfPrenom () {
					return this.ProfPrenom;
				}
				
			    public String Matiere;

				public String getMatiere () {
					return this.Matiere;
				}
				
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Filiere;

				public String getFiliere () {
					return this.Filiere;
				}
				
			    public String Annee;

				public String getAnnee () {
					return this.Annee;
				}
				
			    public String Date;

				public String getDate () {
					return this.Date;
				}
				
			    public String Salle;

				public String getSalle () {
					return this.Salle;
				}
				
			    public String anneeScolaire;

				public String getAnneeScolaire () {
					return this.anneeScolaire;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length) {
				if(length < 1024 && commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_.length == 0) {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[1024];
				} else {
   					commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_ = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length);
			strReturn = new String(commonByteArray_RECOUPEMENTFICHIERS_ToDatabase_, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_RECOUPEMENTFICHIERS_ToDatabase_) {

        	try {

        		int length = 0;
		
					this.ProfNom = readString(dis);
					
					this.ProfPrenom = readString(dis);
					
					this.Matiere = readString(dis);
					
					this.Nom = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Filiere = readString(dis);
					
					this.Annee = readString(dis);
					
					this.Date = readString(dis);
					
					this.Salle = readString(dis);
					
					this.anneeScolaire = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProfNom,dos);
					
					// String
				
						writeString(this.ProfPrenom,dos);
					
					// String
				
						writeString(this.Matiere,dos);
					
					// String
				
						writeString(this.Nom,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Filiere,dos);
					
					// String
				
						writeString(this.Annee,dos);
					
					// String
				
						writeString(this.Date,dos);
					
					// String
				
						writeString(this.Salle,dos);
					
					// String
				
						writeString(this.anneeScolaire,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProfNom="+ProfNom);
		sb.append(",ProfPrenom="+ProfPrenom);
		sb.append(",Matiere="+Matiere);
		sb.append(",Nom="+Nom);
		sb.append(",Prenom="+Prenom);
		sb.append(",Filiere="+Filiere);
		sb.append(",Annee="+Annee);
		sb.append(",Date="+Date);
		sb.append(",Salle="+Salle);
		sb.append(",anneeScolaire="+anneeScolaire);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
StudentStruct Student = new StudentStruct();
row8Struct row8 = new row8Struct();
TeacherStruct Teacher = new TeacherStruct();
row9Struct row9 = new row9Struct();
Filiere0Struct Filiere0 = new Filiere0Struct();
row10Struct row10 = new row10Struct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_3 = 0;
		
    	class BytesLimit65535_tDBOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_3().limitLog4jByte();






int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;

int rejectedCount_tDBOutput_3=0;

String tableName_tDBOutput_3 = "eleve";
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
long date_tDBOutput_3;

java.sql.Connection conn_tDBOutput_3 = null;
		String dbProperties_tDBOutput_3 = "noDatetimeStringSync=true";
		String url_tDBOutput_3 = null;
		if(dbProperties_tDBOutput_3 == null || dbProperties_tDBOutput_3.trim().length() == 0) {
			url_tDBOutput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "convocationrattrapage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_3 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_3.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "convocationrattrapage" + "?" + properties_tDBOutput_3;
		}
		String driverClass_tDBOutput_3 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tDBOutput_3 = "root";
		

		 
	final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");

		String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
		java.lang.Class.forName(driverClass_tDBOutput_3);
		
		conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);
		
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;

int count_tDBOutput_3=0;
    	
            java.sql.Statement stmtClear_tDBOutput_3 = conn_tDBOutput_3.createStatement();
            stmtClear_tDBOutput_3.executeUpdate("DELETE FROM `" + tableName_tDBOutput_3 + "`");
            stmtClear_tDBOutput_3.close();

				String insert_tDBOutput_3 = "INSERT INTO `" + "eleve" + "` (`NomEtudiant`,`PrenomEtudiant`) VALUES (?,?)";
		        int batchSize_tDBOutput_3 = 100;
	   			int batchSizeCounter_tDBOutput_3=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Student" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_4 = 0;
		
    	class BytesLimit65535_tUniqRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_4().limitLog4jByte();

	
		class KeyStruct_tUniqRow_4 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String NomEtudiant;
					String PrenomEtudiant;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.NomEtudiant == null) ? 0 : this.NomEtudiant.hashCode());
								
								result = prime * result + ((this.PrenomEtudiant == null) ? 0 : this.PrenomEtudiant.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;
				
									if (this.NomEtudiant == null) {
										if (other.NomEtudiant != null) 
											return false;
								
									} else if (!this.NomEtudiant.equals(other.NomEtudiant))
								 
										return false;
								
									if (this.PrenomEtudiant == null) {
										if (other.PrenomEtudiant != null) 
											return false;
								
									} else if (!this.PrenomEtudiant.equals(other.PrenomEtudiant))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0;
KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>(); 

 



/**
 * [tUniqRow_4 begin ] stop
 */





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_5 = 0;
		
    	class BytesLimit65535_tDBOutput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_5().limitLog4jByte();






int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;

int rejectedCount_tDBOutput_5=0;

String tableName_tDBOutput_5 = "prof";
boolean whetherReject_tDBOutput_5 = false;

java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
long date_tDBOutput_5;

java.sql.Connection conn_tDBOutput_5 = null;
		String dbProperties_tDBOutput_5 = "noDatetimeStringSync=true";
		String url_tDBOutput_5 = null;
		if(dbProperties_tDBOutput_5 == null || dbProperties_tDBOutput_5.trim().length() == 0) {
			url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "convocationrattrapage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_5 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_5.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "convocationrattrapage" + "?" + properties_tDBOutput_5;
		}
		String driverClass_tDBOutput_5 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tDBOutput_5 = "root";
		

		 
	final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");

		String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
		java.lang.Class.forName(driverClass_tDBOutput_5);
		
		conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);
		
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;

int count_tDBOutput_5=0;
    	
            java.sql.Statement stmtClear_tDBOutput_5 = conn_tDBOutput_5.createStatement();
            stmtClear_tDBOutput_5.executeUpdate("DELETE FROM `" + tableName_tDBOutput_5 + "`");
            stmtClear_tDBOutput_5.close();

				String insert_tDBOutput_5 = "INSERT INTO `" + "prof" + "` (`nomProf`,`prenomProf`) VALUES (?,?)";
		        int batchSize_tDBOutput_5 = 100;
	   			int batchSizeCounter_tDBOutput_5=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);


 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Teacher" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_5 = 0;
		
    	class BytesLimit65535_tUniqRow_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_5().limitLog4jByte();

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String nomProf;
					String prenomProf;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.nomProf == null) ? 0 : this.nomProf.hashCode());
								
								result = prime * result + ((this.prenomProf == null) ? 0 : this.prenomProf.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.nomProf == null) {
										if (other.nomProf != null) 
											return false;
								
									} else if (!this.nomProf.equals(other.nomProf))
								 
										return false;
								
									if (this.prenomProf == null) {
										if (other.prenomProf != null) 
											return false;
								
									} else if (!this.prenomProf.equals(other.prenomProf))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */





	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_7 = 0;
		
    	class BytesLimit65535_tDBOutput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_7().limitLog4jByte();






int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;

int rejectedCount_tDBOutput_7=0;

String tableName_tDBOutput_7 = "filiere";
boolean whetherReject_tDBOutput_7 = false;

java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar.getInstance();
calendar_tDBOutput_7.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_7 = calendar_tDBOutput_7.getTime().getTime();
calendar_tDBOutput_7.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_7 = calendar_tDBOutput_7.getTime().getTime();
long date_tDBOutput_7;

java.sql.Connection conn_tDBOutput_7 = null;
		String dbProperties_tDBOutput_7 = "noDatetimeStringSync=true";
		String url_tDBOutput_7 = null;
		if(dbProperties_tDBOutput_7 == null || dbProperties_tDBOutput_7.trim().length() == 0) {
			url_tDBOutput_7 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "convocationrattrapage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_7 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_7.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_7 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_7 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "convocationrattrapage" + "?" + properties_tDBOutput_7;
		}
		String driverClass_tDBOutput_7 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tDBOutput_7 = "root";
		

		 
	final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil.decryptPassword("99a5c139d564b21c");

		String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
		java.lang.Class.forName(driverClass_tDBOutput_7);
		
		conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);
		
	
	resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
        conn_tDBOutput_7.setAutoCommit(false);
        int commitEvery_tDBOutput_7 = 10000;
        int commitCounter_tDBOutput_7 = 0;

int count_tDBOutput_7=0;
    	
            java.sql.Statement stmtClear_tDBOutput_7 = conn_tDBOutput_7.createStatement();
            stmtClear_tDBOutput_7.executeUpdate("DELETE FROM `" + tableName_tDBOutput_7 + "`");
            stmtClear_tDBOutput_7.close();

				String insert_tDBOutput_7 = "INSERT INTO `" + "filiere" + "` (`NomFiliere`) VALUES (?)";
		        int batchSize_tDBOutput_7 = 100;
	   			int batchSizeCounter_tDBOutput_7=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);


 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_6", false);
		start_Hash.put("tUniqRow_6", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Filiere0" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_6 = 0;
		
    	class BytesLimit65535_tUniqRow_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_6().limitLog4jByte();

	
		class KeyStruct_tUniqRow_6 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String NomFiliere;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.NomFiliere == null) ? 0 : this.NomFiliere.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;
				
									if (this.NomFiliere == null) {
										if (other.NomFiliere != null) 
											return false;
								
									} else if (!this.NomFiliere.equals(other.NomFiliere))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_6 = 0;
int nb_duplicates_tUniqRow_6 = 0;
KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>(); 

 



/**
 * [tUniqRow_6 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
StudentStruct Student_tmp = new StudentStruct();
TeacherStruct Teacher_tmp = new TeacherStruct();
Filiere0Struct Filiere0_tmp = new Filiere0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_4", false);
		start_Hash.put("tFileInputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_4";

	
		int tos_count_tFileInputExcel_4 = 0;
		
    	class BytesLimit65535_tFileInputExcel_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_4().limitLog4jByte();



			class RegexUtil_tFileInputExcel_4 {

		    	public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

			        if(useRegex){//this part process the regex issue

				        jxl.Sheet[] sheets = workbook.getSheets();
				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (int i = 0; i < sheets.length; i++) {
				            String sheetName = sheets[i].getName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	jxl.Sheet sheet = workbook.getSheet(sheetName);
				            	if(sheet != null){
				                	list.add(sheet);
				                }
				            }
				        }

			        }else{
			        	jxl.Sheet sheet = workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
			    	java.util.List<jxl.Sheet> list =  new java.util.ArrayList<jxl.Sheet>();
			    	jxl.Sheet sheet = workbook.getSheet(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}


		RegexUtil_tFileInputExcel_4 regexUtil_tFileInputExcel_4 = new RegexUtil_tFileInputExcel_4();
		final jxl.WorkbookSettings workbookSettings_tFileInputExcel_4 = new jxl.WorkbookSettings();
		workbookSettings_tFileInputExcel_4.setDrawingsDisabled(true);
        workbookSettings_tFileInputExcel_4.setEncoding("UTF-8");

        Object source_tFileInputExcel_4 ="C:/Talend/TOS_MDM-Studio-20180411_1414-V7.0.1/workspace/fusion.xls";
        final jxl.Workbook workbook_tFileInputExcel_4;

        java.io.InputStream toClose_tFileInputExcel_4 = null;
        java.io.BufferedInputStream buffIStreamtFileInputExcel_4 = null;
        try {
            if(source_tFileInputExcel_4 instanceof java.io.InputStream){
        		toClose_tFileInputExcel_4 = (java.io.InputStream)source_tFileInputExcel_4;
        		buffIStreamtFileInputExcel_4 = new java.io.BufferedInputStream(toClose_tFileInputExcel_4);
        		workbook_tFileInputExcel_4 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_4, workbookSettings_tFileInputExcel_4);
            }else if(source_tFileInputExcel_4 instanceof String){
        		toClose_tFileInputExcel_4 = new java.io.FileInputStream(source_tFileInputExcel_4.toString());
        		buffIStreamtFileInputExcel_4 = new java.io.BufferedInputStream(toClose_tFileInputExcel_4);
        		workbook_tFileInputExcel_4 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_4, workbookSettings_tFileInputExcel_4);
            }else{
            	workbook_tFileInputExcel_4 = null;
            	throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
            }
        } finally {
			try{
			   if(buffIStreamtFileInputExcel_4 != null){
			   	  buffIStreamtFileInputExcel_4.close();
			   }
			}catch(Exception e){
			}
        }
        try {
		java.util.List<jxl.Sheet> sheetList_tFileInputExcel_4 = java.util.Arrays.<jxl.Sheet> asList(workbook_tFileInputExcel_4.getSheets());
        if(sheetList_tFileInputExcel_4.size() <= 0){
        	throw new RuntimeException("Special sheets not exist!");
        }

        java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_4 = new java.util.ArrayList<jxl.Sheet>();
        for(jxl.Sheet sheet_FilterNull_tFileInputExcel_4 : sheetList_tFileInputExcel_4){
        	if(sheet_FilterNull_tFileInputExcel_4.getRows()>0){
        		sheet_FilterNullList_tFileInputExcel_4.add(sheet_FilterNull_tFileInputExcel_4);
        	}
        }
		sheetList_tFileInputExcel_4 = sheet_FilterNullList_tFileInputExcel_4;
	if(sheetList_tFileInputExcel_4.size()>0){
        int nb_line_tFileInputExcel_4 = 0;

        int begin_line_tFileInputExcel_4 = 1;

        int footer_input_tFileInputExcel_4 = 0;

        int end_line_tFileInputExcel_4=0;
        for(jxl.Sheet sheet_tFileInputExcel_4:sheetList_tFileInputExcel_4){
        	end_line_tFileInputExcel_4+=sheet_tFileInputExcel_4.getRows();
        }
        end_line_tFileInputExcel_4 -= footer_input_tFileInputExcel_4;
        int limit_tFileInputExcel_4 = -1;
        int start_column_tFileInputExcel_4 = 1-1;
        int end_column_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(0).getColumns();
        jxl.Cell[] row_tFileInputExcel_4 = null;
        jxl.Sheet sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(0);
        int rowCount_tFileInputExcel_4 = 0;
        int sheetIndex_tFileInputExcel_4 = 0;
        int currentRows_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(0).getRows();

        //for the number format
        java.text.DecimalFormat df_tFileInputExcel_4 = new java.text.DecimalFormat("#.####################################");
		char separatorChar_tFileInputExcel_4 = df_tFileInputExcel_4.getDecimalFormatSymbols().getDecimalSeparator();
		
		
		
        for(int i_tFileInputExcel_4 = begin_line_tFileInputExcel_4; i_tFileInputExcel_4 < end_line_tFileInputExcel_4; i_tFileInputExcel_4++){

        	int emptyColumnCount_tFileInputExcel_4 = 0;

        	if (limit_tFileInputExcel_4 != -1 && nb_line_tFileInputExcel_4 >= limit_tFileInputExcel_4) {
        		break;
        	}

            while (i_tFileInputExcel_4 >= rowCount_tFileInputExcel_4 + currentRows_tFileInputExcel_4) {
                rowCount_tFileInputExcel_4 += currentRows_tFileInputExcel_4;
                sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(++sheetIndex_tFileInputExcel_4);
                currentRows_tFileInputExcel_4 = sheet_tFileInputExcel_4.getRows();
            }
            if (rowCount_tFileInputExcel_4 <= i_tFileInputExcel_4) {
                row_tFileInputExcel_4 = sheet_tFileInputExcel_4.getRow(i_tFileInputExcel_4 - rowCount_tFileInputExcel_4);
            }
        	globalMap.put("tFileInputExcel_4_CURRENT_SHEET",sheet_tFileInputExcel_4.getName());
    		row7 = null;
					int tempRowLength_tFileInputExcel_4 = 10;
				
				int columnIndex_tFileInputExcel_4 = 0;
			
//
//end%>
			
			String[] temp_row_tFileInputExcel_4 = new String[tempRowLength_tFileInputExcel_4];
			int actual_end_column_tFileInputExcel_4 = end_column_tFileInputExcel_4 >	row_tFileInputExcel_4.length ? row_tFileInputExcel_4.length : end_column_tFileInputExcel_4;

				java.util.TimeZone zone_tFileInputExcel_4 = java.util.TimeZone.getTimeZone("GMT");
                java.text.SimpleDateFormat sdf_tFileInputExcel_4 = new java.text.SimpleDateFormat("dd-MM-yyyy");
                sdf_tFileInputExcel_4.setTimeZone(zone_tFileInputExcel_4);
                

			for(int i=0;i<tempRowLength_tFileInputExcel_4;i++){

				if(i + start_column_tFileInputExcel_4 < actual_end_column_tFileInputExcel_4){

				  jxl.Cell cell_tFileInputExcel_4 = row_tFileInputExcel_4[i + start_column_tFileInputExcel_4];
                        temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4.getContents();

				}else{
					temp_row_tFileInputExcel_4[i]="";
				}
			}

			boolean whetherReject_tFileInputExcel_4 = false;
			row7 = new row7Struct();
			int curColNum_tFileInputExcel_4 = -1;
			String curColName_tFileInputExcel_4 = "";
			try {
							columnIndex_tFileInputExcel_4 = 0;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "ProfNom";
			row7.ProfNom = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.ProfNom = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 1;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "ProfPrenom";
			row7.ProfPrenom = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.ProfPrenom = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 2;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "Matiere";
			row7.Matiere = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.Matiere = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 3;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "Nom";
			row7.Nom = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.Nom = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 4;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "Prenom";
			row7.Prenom = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.Prenom = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 5;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "Filiere";
			row7.Filiere = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.Filiere = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 6;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "Annee";
			row7.Annee = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.Annee = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 7;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "Date";
			row7.Date = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.Date = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 8;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "Salle";
			row7.Salle = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.Salle = null;
				emptyColumnCount_tFileInputExcel_4++;
		}
							columnIndex_tFileInputExcel_4 = 9;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "anneeScolaire";
			row7.anneeScolaire = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else {
				row7.anneeScolaire = null;
				emptyColumnCount_tFileInputExcel_4++;
		}

			nb_line_tFileInputExcel_4++;
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputExcel_4 = true;
                System.err.println(e.getMessage());
                row7 = null;
    }

					
		



 



/**
 * [tFileInputExcel_4 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 


	tos_count_tFileInputExcel_4++;

/**
 * [tFileInputExcel_4 main ] stop
 */
	
	/**
	 * [tFileInputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Student = null;
Teacher = null;
Filiere0 = null;


// # Output table : 'Student'
Student_tmp.NomEtudiant = row7.Nom ;
Student_tmp.PrenomEtudiant = row7.Prenom ;
Student = Student_tmp;

// # Output table : 'Teacher'
// # Filter conditions 
if( 

row7.ProfNom != null &&  row7.ProfPrenom != null

 ) {
Teacher_tmp.nomProf = row7.ProfNom ;
Teacher_tmp.prenomProf = row7.ProfPrenom ;
Teacher = Teacher_tmp;
} // closing filter/reject

// # Output table : 'Filiere0'
Filiere0_tmp.NomFiliere = row7.Filiere ;
Filiere0 = Filiere0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Student"
if(Student != null) { 



	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

			//Student
			//Student


			
				if(execStat){
					runStat.updateStatOnConnection("Student"+iterateId,1, 1);
				} 
			

		
row8 = null;			
if(Student.NomEtudiant == null){
	finder_tUniqRow_4.NomEtudiant = null;
}else{
	finder_tUniqRow_4.NomEtudiant = Student.NomEtudiant.toLowerCase();
}
if(Student.PrenomEtudiant == null){
	finder_tUniqRow_4.PrenomEtudiant = null;
}else{
	finder_tUniqRow_4.PrenomEtudiant = Student.PrenomEtudiant.toLowerCase();
}	
finder_tUniqRow_4.hashCodeDirty = true;
if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
		KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

		
if(Student.NomEtudiant == null){
	new_tUniqRow_4.NomEtudiant = null;
}else{
	new_tUniqRow_4.NomEtudiant = Student.NomEtudiant.toLowerCase();
}
if(Student.PrenomEtudiant == null){
	new_tUniqRow_4.PrenomEtudiant = null;
}else{
	new_tUniqRow_4.PrenomEtudiant = Student.PrenomEtudiant.toLowerCase();
}
		
		keystUniqRow_4.add(new_tUniqRow_4);if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.NomEtudiant = Student.NomEtudiant;			row8.PrenomEtudiant = Student.PrenomEtudiant;					
		nb_uniques_tUniqRow_4++;
	} else {
	  nb_duplicates_tUniqRow_4++;
	}

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
	
	/**
	 * [tUniqRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_3 = false;
                            if(row8.NomEtudiant == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, row8.NomEtudiant);
}

                            if(row8.PrenomEtudiant == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, row8.PrenomEtudiant);
}

                    pstmt_tDBOutput_3.addBatch();
                    nb_line_tDBOutput_3++;

                      batchSizeCounter_tDBOutput_3++;
                if ( batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
                try {
                        int countSum_tDBOutput_3 = 0;
                        for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_3 = 0;
                    for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
                        countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                    }
                    insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_3 = 0;
            }
                commitCounter_tDBOutput_3++;

                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

                try {
                        int countSum_tDBOutput_3 = 0;
                        for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_3 = 0;
                    for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
                        countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                    }
                    insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_3.commit();
                    commitCounter_tDBOutput_3=0;

                }


 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tUniqRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_end ] stop
 */

} // End of branch "Student"




// Start of branch "Teacher"
if(Teacher != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

			//Teacher
			//Teacher


			
				if(execStat){
					runStat.updateStatOnConnection("Teacher"+iterateId,1, 1);
				} 
			

		
row9 = null;			
if(Teacher.nomProf == null){
	finder_tUniqRow_5.nomProf = null;
}else{
	finder_tUniqRow_5.nomProf = Teacher.nomProf.toLowerCase();
}
if(Teacher.prenomProf == null){
	finder_tUniqRow_5.prenomProf = null;
}else{
	finder_tUniqRow_5.prenomProf = Teacher.prenomProf.toLowerCase();
}	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
if(Teacher.nomProf == null){
	new_tUniqRow_5.nomProf = null;
}else{
	new_tUniqRow_5.nomProf = Teacher.nomProf.toLowerCase();
}
if(Teacher.prenomProf == null){
	new_tUniqRow_5.prenomProf = null;
}else{
	new_tUniqRow_5.prenomProf = Teacher.prenomProf.toLowerCase();
}
		
		keystUniqRow_5.add(new_tUniqRow_5);if(row9 == null){ 
	
	row9 = new row9Struct();
}row9.nomProf = Teacher.nomProf;			row9.prenomProf = Teacher.prenomProf;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_5 = false;
                            if(row9.nomProf == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, row9.nomProf);
}

                            if(row9.prenomProf == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, row9.prenomProf);
}

                    pstmt_tDBOutput_5.addBatch();
                    nb_line_tDBOutput_5++;

                      batchSizeCounter_tDBOutput_5++;
                if ( batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
                try {
                        int countSum_tDBOutput_5 = 0;
                        for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
                            countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_5 = 0;
                    for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
                        countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                    }
                    insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_5 = 0;
            }
                commitCounter_tDBOutput_5++;

                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

                try {
                        int countSum_tDBOutput_5 = 0;
                        for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
                            countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_5 = 0;
                    for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
                        countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                    }
                    insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_5.commit();
                    commitCounter_tDBOutput_5=0;

                }


 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "Teacher"




// Start of branch "Filiere0"
if(Filiere0 != null) { 



	
	/**
	 * [tUniqRow_6 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

			//Filiere0
			//Filiere0


			
				if(execStat){
					runStat.updateStatOnConnection("Filiere0"+iterateId,1, 1);
				} 
			

		
row10 = null;			
if(Filiere0.NomFiliere == null){
	finder_tUniqRow_6.NomFiliere = null;
}else{
	finder_tUniqRow_6.NomFiliere = Filiere0.NomFiliere.toLowerCase();
}	
finder_tUniqRow_6.hashCodeDirty = true;
if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
		KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

		
if(Filiere0.NomFiliere == null){
	new_tUniqRow_6.NomFiliere = null;
}else{
	new_tUniqRow_6.NomFiliere = Filiere0.NomFiliere.toLowerCase();
}
		
		keystUniqRow_6.add(new_tUniqRow_6);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.NomFiliere = Filiere0.NomFiliere;					
		nb_uniques_tUniqRow_6++;
	} else {
	  nb_duplicates_tUniqRow_6++;
	}

 


	tos_count_tUniqRow_6++;

/**
 * [tUniqRow_6 main ] stop
 */
	
	/**
	 * [tUniqRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_7 = false;
                            if(row10.NomFiliere == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(1, row10.NomFiliere);
}

                    pstmt_tDBOutput_7.addBatch();
                    nb_line_tDBOutput_7++;

                      batchSizeCounter_tDBOutput_7++;
                if ( batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7) {
                try {
                        int countSum_tDBOutput_7 = 0;
                        for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_7 = 0;
                    for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
                        countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                    }
                    insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_7 = 0;
            }
                commitCounter_tDBOutput_7++;

                if(commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {

                try {
                        int countSum_tDBOutput_7 = 0;
                        for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_7 = 0;
                    for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
                        countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                    }
                    insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_7.commit();
                    commitCounter_tDBOutput_7=0;

                }


 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_end ] stop
 */

} // End of branch "Filiere0"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_4_NB_LINE",nb_line_tFileInputExcel_4);
			
				}
			
		} finally { 
				
					if(!(source_tFileInputExcel_4 instanceof java.io.InputStream)){
						workbook_tFileInputExcel_4.close();
					}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_4", true);
end_Hash.put("tFileInputExcel_4", System.currentTimeMillis());




/**
 * [tFileInputExcel_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Student"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



                try {
                		if (batchSizeCounter_tDBOutput_3 != 0) {
							int countSum_tDBOutput_3 = 0;
							
							for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
								countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
            	    insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_3 = 0;
    		
	

        if(pstmt_tDBOutput_3 != null) {
			
				pstmt_tDBOutput_3.close();
			
        }

    	if (commitCounter_tDBOutput_3 > 0) {
    		
    		conn_tDBOutput_3.commit();
    		
    	}
    		
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */







	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Teacher"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



                try {
                		if (batchSizeCounter_tDBOutput_5 != 0) {
							int countSum_tDBOutput_5 = 0;
							
							for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
								countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					
            	    insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_5 = 0;
    		
	

        if(pstmt_tDBOutput_5 != null) {
			
				pstmt_tDBOutput_5.close();
			
        }

    	if (commitCounter_tDBOutput_5 > 0) {
    		
    		conn_tDBOutput_5.commit();
    		
    	}
    		
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */







	
	/**
	 * [tUniqRow_6 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

globalMap.put("tUniqRow_6_NB_UNIQUES",nb_uniques_tUniqRow_6);
globalMap.put("tUniqRow_6_NB_DUPLICATES",nb_duplicates_tUniqRow_6);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Filiere0"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_6", true);
end_Hash.put("tUniqRow_6", System.currentTimeMillis());




/**
 * [tUniqRow_6 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



                try {
                		if (batchSizeCounter_tDBOutput_7 != 0) {
							int countSum_tDBOutput_7 = 0;
							
							for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
								countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_7 = 0;
					for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
					
            	    insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_7 = 0;
    		
	

        if(pstmt_tDBOutput_7 != null) {
			
				pstmt_tDBOutput_7.close();
			
        }

    	if (commitCounter_tDBOutput_7 > 0) {
    		
    		conn_tDBOutput_7.commit();
    		
    	}
    		
		
    	conn_tDBOutput_7 .close();
    	
    	resourceMap.put("finish_tDBOutput_7", true);
    	

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	
		if(resourceMap.get("finish_tDBOutput_3")==null){
			if(resourceMap.get("conn_tDBOutput_3")!=null){
				try {
					
					
					java.sql.Connection ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3");
					
					
            		
					ctn_tDBOutput_3.close();
					
				} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
					String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
					
					System.err.println(errorMessage_tDBOutput_3);
				}
			}
		}
	

 



/**
 * [tDBOutput_3 finally ] stop
 */







	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	
		if(resourceMap.get("finish_tDBOutput_5")==null){
			if(resourceMap.get("conn_tDBOutput_5")!=null){
				try {
					
					
					java.sql.Connection ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5");
					
					
            		
					ctn_tDBOutput_5.close();
					
				} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
					String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
					
					System.err.println(errorMessage_tDBOutput_5);
				}
			}
		}
	

 



/**
 * [tDBOutput_5 finally ] stop
 */







	
	/**
	 * [tUniqRow_6 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



	
		if(resourceMap.get("finish_tDBOutput_7")==null){
			if(resourceMap.get("conn_tDBOutput_7")!=null){
				try {
					
					
					java.sql.Connection ctn_tDBOutput_7 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_7");
					
					
            		
					ctn_tDBOutput_7.close();
					
				} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
					String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :" + sqlEx_tDBOutput_7.getMessage();
					
					System.err.println(errorMessage_tDBOutput_7);
				}
			}
		}
	

 



/**
 * [tDBOutput_7 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ToDatabase_ ToDatabase_Class = new ToDatabase_();

        int exitCode = ToDatabase_Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ToDatabase_.class.getClassLoader().getResourceAsStream("recoupementfichiers/todatabase__0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ToDatabase_.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_4) {
globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", -1);

e_tFileInputExcel_4.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ToDatabase_");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     113648 characters generated by Talend Open Studio for MDM 
 *     on the 13 juin 2019 15:53:24 CEST
 ************************************************************************************************/